/*
 * Copyright (c) 2020. Axetta LLC. All Rights Reserved.
 */

/*
 * API МЭШ.Контингент
 * Описание REST API МЭШ.Контингент
 *
 * OpenAPI spec version: 0.0.1
 * Contact: fixme@ktelabs.ru
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ru.iteco.client.api;

import ru.iteco.client.ApiException;
import ru.iteco.client.model.Category;
import ru.iteco.client.model.ModelClass;
import ru.iteco.client.model.PersonAddress;
import ru.iteco.client.model.PersonAgent;
import ru.iteco.client.model.PersonCategory;
import ru.iteco.client.model.PersonContact;
import ru.iteco.client.model.PersonDocument;
import ru.iteco.client.model.PersonEducation;
import ru.iteco.client.model.PersonPrevention;

import org.junit.Test;
import org.junit.Ignore;

import java.util.List;

/**
 * API tests for CreateApi
 */
@Ignore
public class CreateApiTest {

    private final CreateApi api = new CreateApi();

    /**
     * Создать категорию
     *
     * Метод создания категории
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addCategoryTest() throws ApiException {
        Category body = null;
        Category response = api.addCategory(body);

        // TODO: test validations
    }
    /**
     * Создать класс
     *
     * Метод создания класса
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addClassTest() throws ApiException {
        ModelClass body = null;
        ModelClass response = api.addClass(body);

        // TODO: test validations
    }
    /**
     * Пакетное создание данных об обучении персоны
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personsBatchEducationPostTest() throws ApiException {
        List<PersonEducation> body = null;
        api.personsBatchEducationPost(body);

        // TODO: test validations
    }
    /**
     * Создание нового адреса персоны
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personsPersonIdAddressesPostTest() throws ApiException {
        String personId = null;
        PersonAddress body = null;
        PersonAddress response = api.personsPersonIdAddressesPost(personId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Создание нового представителя персоны или добавление существующей персоны в качестве представителя. Если добавяется существующая персона, agent_person не указывается, вместо нее должен присутствовать атрибут agent_person_id с идентификатором персоны представителя
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personsPersonIdAgentsPostTest() throws ApiException {
        String personId = null;
        PersonAgent body = null;
        PersonAgent response = api.personsPersonIdAgentsPost(personId, body);

        // TODO: test validations
    }
    /**
     * Добавление новых данных о категории
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personsPersonIdCategoryPostTest() throws ApiException {
        String personId = null;
        PersonCategory body = null;
        PersonCategory response = api.personsPersonIdCategoryPost(personId, body);

        // TODO: test validations
    }
    /**
     * Создание нового контакта персоны
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personsPersonIdContactsPostTest() throws ApiException {
        String personId = null;
        PersonContact body = null;
        PersonContact response = api.personsPersonIdContactsPost(personId, body);

        // TODO: test validations
    }
    /**
     * Создание нового документа персоны
     *
     * 1. ищется персона с указанным id.&lt;br/&gt;2. Создается документ с указанными параметрами.&lt;br/&gt; 3. заполняется таблица person_document.&lt;br/&gt; 4. В результате возвращается созданная структура описания документа&lt;br/&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personsPersonIdDocumentsPostTest() throws ApiException {
        String personId = null;
        PersonDocument body = null;
        PersonDocument response = api.personsPersonIdDocumentsPost(personId, body);

        // TODO: test validations
    }
    /**
     * Добавление новых данных об обучении
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personsPersonIdEducationPostTest() throws ApiException {
        String personId = null;
        PersonEducation body = null;
        PersonEducation response = api.personsPersonIdEducationPost(personId, body);

        // TODO: test validations
    }
    /**
     * Добавление информации об учете персоны
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personsPersonIdPreventionsPostTest() throws ApiException {
        String personId = null;
        PersonPrevention body = null;
        PersonPrevention response = api.personsPersonIdPreventionsPost(personId, body);

        // TODO: test validations
    }
}
