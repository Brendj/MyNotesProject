/*
 * Copyright (c) 2020. Axetta LLC. All Rights Reserved.
 */

/*
 * API МЭШ.Контингент
 * Описание REST API МЭШ.Контингент
 *
 * OpenAPI spec version: 0.0.1
 * Contact: fixme@ktelabs.ru
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ru.iteco.client.api;

import ru.iteco.client.ApiException;
import ru.iteco.client.model.Body;
import ru.iteco.client.model.Body1;

import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;
import ru.iteco.client.model.Person;
import ru.iteco.client.model.PersonAddress;
import ru.iteco.client.model.PersonAgent;
import ru.iteco.client.model.PersonCategory;
import ru.iteco.client.model.PersonContact;
import ru.iteco.client.model.PersonDocument;
import ru.iteco.client.model.PersonEducation;
import ru.iteco.client.model.PersonInfo;
import ru.iteco.client.model.PersonPrevention;

import org.junit.Test;
import org.junit.Ignore;

import java.util.List;

/**
 * API tests for PersonApi
 */
@Ignore
public class PersonApiTest {

    private final PersonApi api = new PersonApi();

    /**
     * Пакетное создание данных об обучении персоны
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personsBatchEducationPostTest() throws ApiException {
        List<PersonEducation> body = null;
        api.personsBatchEducationPost(body);

        // TODO: test validations
    }
    /**
     * Пакетное изменение данных об обучении персоны
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personsBatchEducationPutTest() throws ApiException {
        List<PersonEducation> body = null;
        api.personsBatchEducationPut(body);

        // TODO: test validations
    }
    /**
     * Поиск персон
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personsGetTest() throws ApiException {
        String filter = null;
        String expand = null;
        String top = null;
        String skip = null;
        String orderby = null;
        OffsetDateTime actualOn = null;
        LocalDate trainingOn = null;
        List<PersonInfo> response = api.personsGet(filter, expand, top, skip, orderby, actualOn, trainingOn);

        // TODO: test validations
    }
    /**
     * Получить персону по идентификатору
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personsIdGetTest() throws ApiException {
        String id = null;
        OffsetDateTime actualOn = null;
        String expand = null;
        PersonInfo response = api.personsIdGet(id, actualOn, expand);

        // TODO: test validations
    }
    /**
     * Изменение основных данных персоны
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personsIdPutTest() throws ApiException {
        String id = null;
        PersonInfo body = null;
        PersonInfo response = api.personsIdPut(id, body);

        // TODO: test validations
    }
    /**
     * Удаление адреса персоны
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personsPersonIdAddressesIdDeleteTest() throws ApiException {
        String personId = null;
        String id = null;
        api.personsPersonIdAddressesIdDelete(personId, id);

        // TODO: test validations
    }
    /**
     * Изменение адреса персоны
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personsPersonIdAddressesIdPutTest() throws ApiException {
        String personId = null;
        String id = null;
        PersonAddress body = null;
        PersonAddress response = api.personsPersonIdAddressesIdPut(personId, id, body);

        // TODO: test validations
    }
    /**
     * Создание нового адреса персоны
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personsPersonIdAddressesPostTest() throws ApiException {
        String personId = null;
        PersonAddress body = null;
        PersonAddress response = api.personsPersonIdAddressesPost(personId, body);

        // TODO: test validations
    }
    /**
     * Удаление представителя персоны
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personsPersonIdAgentsIdDeleteTest() throws ApiException {
        String personId = null;
        String id = null;
        api.personsPersonIdAgentsIdDelete(personId, id);

        // TODO: test validations
    }
    /**
     * Изменение связи персоны и представителя
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personsPersonIdAgentsIdPutTest() throws ApiException {
        String personId = null;
        String id = null;
        PersonAgent body = null;
        PersonAgent response = api.personsPersonIdAgentsIdPut(personId, id, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Создание нового представителя персоны или добавление существующей персоны в качестве представителя. Если добавяется существующая персона, agent_person не указывается, вместо нее должен присутствовать атрибут agent_person_id с идентификатором персоны представителя
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personsPersonIdAgentsPostTest() throws ApiException {
        String personId = null;
        PersonAgent body = null;
        PersonAgent response = api.personsPersonIdAgentsPost(personId, body);

        // TODO: test validations
    }
    /**
     * Удаление данных о категории персоны
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personsPersonIdCategoryIdDeleteTest() throws ApiException {
        String personId = null;
        String id = null;
        api.personsPersonIdCategoryIdDelete(personId, id);

        // TODO: test validations
    }
    /**
     * Изменение данных о категории
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personsPersonIdCategoryIdPutTest() throws ApiException {
        String personId = null;
        String id = null;
        PersonCategory body = null;
        PersonCategory response = api.personsPersonIdCategoryIdPut(personId, id, body);

        // TODO: test validations
    }
    /**
     * Добавление новых данных о категории
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personsPersonIdCategoryPostTest() throws ApiException {
        String personId = null;
        PersonCategory body = null;
        PersonCategory response = api.personsPersonIdCategoryPost(personId, body);

        // TODO: test validations
    }
    /**
     * Удаление контакта персоны
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personsPersonIdContactsIdDeleteTest() throws ApiException {
        String personId = null;
        String id = null;
        api.personsPersonIdContactsIdDelete(personId, id);

        // TODO: test validations
    }
    /**
     * Изменение контакта персоны
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personsPersonIdContactsIdPutTest() throws ApiException {
        String personId = null;
        String id = null;
        PersonContact body = null;
        PersonContact response = api.personsPersonIdContactsIdPut(personId, id, body);

        // TODO: test validations
    }
    /**
     * Создание нового контакта персоны
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personsPersonIdContactsPostTest() throws ApiException {
        String personId = null;
        PersonContact body = null;
        PersonContact response = api.personsPersonIdContactsPost(personId, body);

        // TODO: test validations
    }
    /**
     * Удаление документа персоны
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personsPersonIdDocumentsIdDeleteTest() throws ApiException {
        String personId = null;
        String id = null;
        api.personsPersonIdDocumentsIdDelete(personId, id);

        // TODO: test validations
    }
    /**
     * Изменение документа персоны
     *
     * 1. Находится документ с указанным идентификатором. 2. Проверяется что документ принадлежит персоне с указанным идентификатором 3. Находится запись person_document для указанного документа 4. Поле actual_to присваивается значение системного времени приема запроса 5. Создается новая запись в таблице person_document, где поле actual_from равна системной дате приема запроса. actual_to - в будущем 6. возвращается объект Документ
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personsPersonIdDocumentsIdPutTest() throws ApiException {
        String personId = null;
        String id = null;
        PersonDocument body = null;
        PersonDocument response = api.personsPersonIdDocumentsIdPut(personId, id, body);

        // TODO: test validations
    }
    /**
     * Создание нового документа персоны
     *
     * 1. ищется персона с указанным id.&lt;br/&gt;2. Создается документ с указанными параметрами.&lt;br/&gt; 3. заполняется таблица person_document.&lt;br/&gt; 4. В результате возвращается созданная структура описания документа&lt;br/&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personsPersonIdDocumentsPostTest() throws ApiException {
        String personId = null;
        PersonDocument body = null;
        PersonDocument response = api.personsPersonIdDocumentsPost(personId, body);

        // TODO: test validations
    }
    /**
     * Удаление данных об обучении персоны. Метод должен использоваться только в случае добавления ошибочной записи об обучении. В случае отчисления необходимо использовать метод PUT.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personsPersonIdEducationIdDeleteTest() throws ApiException {
        String personId = null;
        String id = null;
        api.personsPersonIdEducationIdDelete(personId, id);

        // TODO: test validations
    }
    /**
     * Изменение данных об обучении персоны
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personsPersonIdEducationIdPutTest() throws ApiException {
        String personId = null;
        String id = null;
        PersonEducation body = null;
        PersonEducation response = api.personsPersonIdEducationIdPut(personId, id, body);

        // TODO: test validations
    }
    /**
     * Добавление новых данных об обучении
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personsPersonIdEducationPostTest() throws ApiException {
        String personId = null;
        PersonEducation body = null;
        PersonEducation response = api.personsPersonIdEducationPost(personId, body);

        // TODO: test validations
    }
    /**
     * Изменение идентификаторов персоны
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personsPersonIdIdsPutTest() throws ApiException {
        String personId = null;
        Person body = null;
        Person response = api.personsPersonIdIdsPut(personId, body);

        // TODO: test validations
    }
    /**
     * Слияние двух или более персон
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personsPersonIdMergePostTest() throws ApiException {
        String personId = null;
        Body body = null;
        PersonInfo response = api.personsPersonIdMergePost(personId, body);

        // TODO: test validations
    }
    /**
     * Получить даты слияний персоны с другими. При слиянии персона должна была выступать в качестве основной.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personsPersonIdMergesGetTest() throws ApiException {
        String personId = null;
        List<OffsetDateTime> response = api.personsPersonIdMergesGet(personId);

        // TODO: test validations
    }
    /**
     * Удаление информации об учете
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personsPersonIdPreventionsIdDeleteTest() throws ApiException {
        String personId = null;
        String id = null;
        api.personsPersonIdPreventionsIdDelete(personId, id);

        // TODO: test validations
    }
    /**
     * Изменение данных об учете персоны
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personsPersonIdPreventionsIdPutTest() throws ApiException {
        String personId = null;
        String id = null;
        PersonPrevention body = null;
        PersonPrevention response = api.personsPersonIdPreventionsIdPut(personId, id, body);

        // TODO: test validations
    }
    /**
     * Добавление информации об учете персоны
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personsPersonIdPreventionsPostTest() throws ApiException {
        String personId = null;
        PersonPrevention body = null;
        PersonPrevention response = api.personsPersonIdPreventionsPost(personId, body);

        // TODO: test validations
    }
    /**
     * Откат слияния персон
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personsPersonIdUnmergePostTest() throws ApiException {
        String personId = null;
        Body1 body = null;
        PersonInfo response = api.personsPersonIdUnmergePost(personId, body);

        // TODO: test validations
    }
    /**
     * Создание персоны
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personsPostTest() throws ApiException {
        PersonInfo body = null;
        PersonInfo response = api.personsPost(body);

        // TODO: test validations
    }
}
