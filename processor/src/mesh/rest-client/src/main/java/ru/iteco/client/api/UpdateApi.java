/*
 * Copyright (c) 2020. Axetta LLC. All Rights Reserved.
 */

/*
 * API МЭШ.Контингент
 * Описание REST API МЭШ.Контингент
 *
 * OpenAPI spec version: 0.0.1
 * Contact: fixme@ktelabs.ru
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ru.iteco.client.api;

import ru.iteco.client.ApiCallback;
import ru.iteco.client.ApiClient;
import ru.iteco.client.ApiException;
import ru.iteco.client.ApiResponse;
import ru.iteco.client.Configuration;
import ru.iteco.client.Pair;
import ru.iteco.client.ProgressRequestBody;
import ru.iteco.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import ru.iteco.client.model.Category;
import ru.iteco.client.model.ModelClass;
import ru.iteco.client.model.Person;
import ru.iteco.client.model.PersonAddress;
import ru.iteco.client.model.PersonAgent;
import ru.iteco.client.model.PersonCategory;
import ru.iteco.client.model.PersonContact;
import ru.iteco.client.model.PersonDocument;
import ru.iteco.client.model.PersonEducation;
import ru.iteco.client.model.PersonInfo;
import ru.iteco.client.model.PersonPrevention;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UpdateApi {
    private ApiClient apiClient;

    public UpdateApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UpdateApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for personsBatchEducationPut
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsBatchEducationPutCall(List<PersonEducation> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/persons/batch/education";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsBatchEducationPutValidateBeforeCall(List<PersonEducation> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = personsBatchEducationPutCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Пакетное изменение данных об обучении персоны
     * 
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void personsBatchEducationPut(List<PersonEducation> body) throws ApiException {
        personsBatchEducationPutWithHttpInfo(body);
    }

    /**
     * Пакетное изменение данных об обучении персоны
     * 
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> personsBatchEducationPutWithHttpInfo(List<PersonEducation> body) throws ApiException {
        com.squareup.okhttp.Call call = personsBatchEducationPutValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Пакетное изменение данных об обучении персоны (asynchronously)
     * 
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsBatchEducationPutAsync(List<PersonEducation> body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsBatchEducationPutValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for personsIdPut
     * @param id Идентификатор версии персоны (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsIdPutCall(String id, PersonInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/persons/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsIdPutValidateBeforeCall(String id, PersonInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling personsIdPut(Async)");
        }
        
        com.squareup.okhttp.Call call = personsIdPutCall(id, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Изменение основных данных персоны
     * 
     * @param id Идентификатор версии персоны (required)
     * @param body  (optional)
     * @return PersonInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PersonInfo personsIdPut(String id, PersonInfo body) throws ApiException {
        ApiResponse<PersonInfo> resp = personsIdPutWithHttpInfo(id, body);
        return resp.getData();
    }

    /**
     * Изменение основных данных персоны
     * 
     * @param id Идентификатор версии персоны (required)
     * @param body  (optional)
     * @return ApiResponse&lt;PersonInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PersonInfo> personsIdPutWithHttpInfo(String id, PersonInfo body) throws ApiException {
        com.squareup.okhttp.Call call = personsIdPutValidateBeforeCall(id, body, null, null);
        Type localVarReturnType = new TypeToken<PersonInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Изменение основных данных персоны (asynchronously)
     * 
     * @param id Идентификатор версии персоны (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsIdPutAsync(String id, PersonInfo body, final ApiCallback<PersonInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsIdPutValidateBeforeCall(id, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PersonInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for personsPersonIdAddressesIdPut
     * @param personId Идентификатор персоны&lt;/br&gt; (пример \&quot;449ab5bd-4f09-47a0-ba89-70ae2cd49692\&quot;) (required)
     * @param id Идентификатор версии адреса (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdAddressesIdPutCall(String personId, String id, PersonAddress body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/persons/{person_id}/addresses/{id}"
            .replaceAll("\\{" + "person_id" + "\\}", apiClient.escapeString(personId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsPersonIdAddressesIdPutValidateBeforeCall(String personId, String id, PersonAddress body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling personsPersonIdAddressesIdPut(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling personsPersonIdAddressesIdPut(Async)");
        }
        
        com.squareup.okhttp.Call call = personsPersonIdAddressesIdPutCall(personId, id, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Изменение адреса персоны
     * 
     * @param personId Идентификатор персоны&lt;/br&gt; (пример \&quot;449ab5bd-4f09-47a0-ba89-70ae2cd49692\&quot;) (required)
     * @param id Идентификатор версии адреса (required)
     * @param body  (optional)
     * @return PersonAddress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PersonAddress personsPersonIdAddressesIdPut(String personId, String id, PersonAddress body) throws ApiException {
        ApiResponse<PersonAddress> resp = personsPersonIdAddressesIdPutWithHttpInfo(personId, id, body);
        return resp.getData();
    }

    /**
     * Изменение адреса персоны
     * 
     * @param personId Идентификатор персоны&lt;/br&gt; (пример \&quot;449ab5bd-4f09-47a0-ba89-70ae2cd49692\&quot;) (required)
     * @param id Идентификатор версии адреса (required)
     * @param body  (optional)
     * @return ApiResponse&lt;PersonAddress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PersonAddress> personsPersonIdAddressesIdPutWithHttpInfo(String personId, String id, PersonAddress body) throws ApiException {
        com.squareup.okhttp.Call call = personsPersonIdAddressesIdPutValidateBeforeCall(personId, id, body, null, null);
        Type localVarReturnType = new TypeToken<PersonAddress>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Изменение адреса персоны (asynchronously)
     * 
     * @param personId Идентификатор персоны&lt;/br&gt; (пример \&quot;449ab5bd-4f09-47a0-ba89-70ae2cd49692\&quot;) (required)
     * @param id Идентификатор версии адреса (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdAddressesIdPutAsync(String personId, String id, PersonAddress body, final ApiCallback<PersonAddress> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsPersonIdAddressesIdPutValidateBeforeCall(personId, id, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PersonAddress>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for personsPersonIdAgentsIdPut
     * @param personId Идентификатор персоны (required)
     * @param id Идентификатор связи с представителем (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdAgentsIdPutCall(String personId, String id, PersonAgent body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/persons/{person_id}/agents/{id}"
            .replaceAll("\\{" + "person_id" + "\\}", apiClient.escapeString(personId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsPersonIdAgentsIdPutValidateBeforeCall(String personId, String id, PersonAgent body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling personsPersonIdAgentsIdPut(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling personsPersonIdAgentsIdPut(Async)");
        }
        
        com.squareup.okhttp.Call call = personsPersonIdAgentsIdPutCall(personId, id, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Изменение связи персоны и представителя
     * 
     * @param personId Идентификатор персоны (required)
     * @param id Идентификатор связи с представителем (required)
     * @param body  (optional)
     * @return PersonAgent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PersonAgent personsPersonIdAgentsIdPut(String personId, String id, PersonAgent body) throws ApiException {
        ApiResponse<PersonAgent> resp = personsPersonIdAgentsIdPutWithHttpInfo(personId, id, body);
        return resp.getData();
    }

    /**
     * Изменение связи персоны и представителя
     * 
     * @param personId Идентификатор персоны (required)
     * @param id Идентификатор связи с представителем (required)
     * @param body  (optional)
     * @return ApiResponse&lt;PersonAgent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PersonAgent> personsPersonIdAgentsIdPutWithHttpInfo(String personId, String id, PersonAgent body) throws ApiException {
        com.squareup.okhttp.Call call = personsPersonIdAgentsIdPutValidateBeforeCall(personId, id, body, null, null);
        Type localVarReturnType = new TypeToken<PersonAgent>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Изменение связи персоны и представителя (asynchronously)
     * 
     * @param personId Идентификатор персоны (required)
     * @param id Идентификатор связи с представителем (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdAgentsIdPutAsync(String personId, String id, PersonAgent body, final ApiCallback<PersonAgent> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsPersonIdAgentsIdPutValidateBeforeCall(personId, id, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PersonAgent>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for personsPersonIdCategoryIdPut
     * @param personId Идентификатор персоны (required)
     * @param id Идентификатор связи (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdCategoryIdPutCall(String personId, String id, PersonCategory body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/persons/{person_id}/category/{id}"
            .replaceAll("\\{" + "person_id" + "\\}", apiClient.escapeString(personId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsPersonIdCategoryIdPutValidateBeforeCall(String personId, String id, PersonCategory body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling personsPersonIdCategoryIdPut(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling personsPersonIdCategoryIdPut(Async)");
        }
        
        com.squareup.okhttp.Call call = personsPersonIdCategoryIdPutCall(personId, id, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Изменение данных о категории
     * 
     * @param personId Идентификатор персоны (required)
     * @param id Идентификатор связи (required)
     * @param body  (optional)
     * @return PersonCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PersonCategory personsPersonIdCategoryIdPut(String personId, String id, PersonCategory body) throws ApiException {
        ApiResponse<PersonCategory> resp = personsPersonIdCategoryIdPutWithHttpInfo(personId, id, body);
        return resp.getData();
    }

    /**
     * Изменение данных о категории
     * 
     * @param personId Идентификатор персоны (required)
     * @param id Идентификатор связи (required)
     * @param body  (optional)
     * @return ApiResponse&lt;PersonCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PersonCategory> personsPersonIdCategoryIdPutWithHttpInfo(String personId, String id, PersonCategory body) throws ApiException {
        com.squareup.okhttp.Call call = personsPersonIdCategoryIdPutValidateBeforeCall(personId, id, body, null, null);
        Type localVarReturnType = new TypeToken<PersonCategory>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Изменение данных о категории (asynchronously)
     * 
     * @param personId Идентификатор персоны (required)
     * @param id Идентификатор связи (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdCategoryIdPutAsync(String personId, String id, PersonCategory body, final ApiCallback<PersonCategory> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsPersonIdCategoryIdPutValidateBeforeCall(personId, id, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PersonCategory>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for personsPersonIdContactsIdPut
     * @param personId Идентификатор персоны (required)
     * @param id Идентификатор контакта (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdContactsIdPutCall(String personId, String id, PersonContact body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/persons/{person_id}/contacts/{id}"
            .replaceAll("\\{" + "person_id" + "\\}", apiClient.escapeString(personId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsPersonIdContactsIdPutValidateBeforeCall(String personId, String id, PersonContact body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling personsPersonIdContactsIdPut(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling personsPersonIdContactsIdPut(Async)");
        }
        
        com.squareup.okhttp.Call call = personsPersonIdContactsIdPutCall(personId, id, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Изменение контакта персоны
     * 
     * @param personId Идентификатор персоны (required)
     * @param id Идентификатор контакта (required)
     * @param body  (optional)
     * @return PersonContact
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PersonContact personsPersonIdContactsIdPut(String personId, String id, PersonContact body) throws ApiException {
        ApiResponse<PersonContact> resp = personsPersonIdContactsIdPutWithHttpInfo(personId, id, body);
        return resp.getData();
    }

    /**
     * Изменение контакта персоны
     * 
     * @param personId Идентификатор персоны (required)
     * @param id Идентификатор контакта (required)
     * @param body  (optional)
     * @return ApiResponse&lt;PersonContact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PersonContact> personsPersonIdContactsIdPutWithHttpInfo(String personId, String id, PersonContact body) throws ApiException {
        com.squareup.okhttp.Call call = personsPersonIdContactsIdPutValidateBeforeCall(personId, id, body, null, null);
        Type localVarReturnType = new TypeToken<PersonContact>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Изменение контакта персоны (asynchronously)
     * 
     * @param personId Идентификатор персоны (required)
     * @param id Идентификатор контакта (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdContactsIdPutAsync(String personId, String id, PersonContact body, final ApiCallback<PersonContact> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsPersonIdContactsIdPutValidateBeforeCall(personId, id, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PersonContact>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for personsPersonIdDocumentsIdPut
     * @param personId Идентификатор персоны (required)
     * @param id Идентификатор документа (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdDocumentsIdPutCall(String personId, String id, PersonDocument body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/persons/{person_id}/documents/{id}"
            .replaceAll("\\{" + "person_id" + "\\}", apiClient.escapeString(personId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsPersonIdDocumentsIdPutValidateBeforeCall(String personId, String id, PersonDocument body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling personsPersonIdDocumentsIdPut(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling personsPersonIdDocumentsIdPut(Async)");
        }
        
        com.squareup.okhttp.Call call = personsPersonIdDocumentsIdPutCall(personId, id, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Изменение документа персоны
     * 1. Находится документ с указанным идентификатором. 2. Проверяется что документ принадлежит персоне с указанным идентификатором 3. Находится запись person_document для указанного документа 4. Поле actual_to присваивается значение системного времени приема запроса 5. Создается новая запись в таблице person_document, где поле actual_from равна системной дате приема запроса. actual_to - в будущем 6. возвращается объект Документ
     * @param personId Идентификатор персоны (required)
     * @param id Идентификатор документа (required)
     * @param body  (optional)
     * @return PersonDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PersonDocument personsPersonIdDocumentsIdPut(String personId, String id, PersonDocument body) throws ApiException {
        ApiResponse<PersonDocument> resp = personsPersonIdDocumentsIdPutWithHttpInfo(personId, id, body);
        return resp.getData();
    }

    /**
     * Изменение документа персоны
     * 1. Находится документ с указанным идентификатором. 2. Проверяется что документ принадлежит персоне с указанным идентификатором 3. Находится запись person_document для указанного документа 4. Поле actual_to присваивается значение системного времени приема запроса 5. Создается новая запись в таблице person_document, где поле actual_from равна системной дате приема запроса. actual_to - в будущем 6. возвращается объект Документ
     * @param personId Идентификатор персоны (required)
     * @param id Идентификатор документа (required)
     * @param body  (optional)
     * @return ApiResponse&lt;PersonDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PersonDocument> personsPersonIdDocumentsIdPutWithHttpInfo(String personId, String id, PersonDocument body) throws ApiException {
        com.squareup.okhttp.Call call = personsPersonIdDocumentsIdPutValidateBeforeCall(personId, id, body, null, null);
        Type localVarReturnType = new TypeToken<PersonDocument>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Изменение документа персоны (asynchronously)
     * 1. Находится документ с указанным идентификатором. 2. Проверяется что документ принадлежит персоне с указанным идентификатором 3. Находится запись person_document для указанного документа 4. Поле actual_to присваивается значение системного времени приема запроса 5. Создается новая запись в таблице person_document, где поле actual_from равна системной дате приема запроса. actual_to - в будущем 6. возвращается объект Документ
     * @param personId Идентификатор персоны (required)
     * @param id Идентификатор документа (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdDocumentsIdPutAsync(String personId, String id, PersonDocument body, final ApiCallback<PersonDocument> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsPersonIdDocumentsIdPutValidateBeforeCall(personId, id, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PersonDocument>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for personsPersonIdEducationIdPut
     * @param personId Идентификатор персоны (required)
     * @param id Идентификатор связи (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdEducationIdPutCall(String personId, String id, PersonEducation body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/persons/{person_id}/education/{id}"
            .replaceAll("\\{" + "person_id" + "\\}", apiClient.escapeString(personId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsPersonIdEducationIdPutValidateBeforeCall(String personId, String id, PersonEducation body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling personsPersonIdEducationIdPut(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling personsPersonIdEducationIdPut(Async)");
        }
        
        com.squareup.okhttp.Call call = personsPersonIdEducationIdPutCall(personId, id, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Изменение данных об обучении персоны
     * 
     * @param personId Идентификатор персоны (required)
     * @param id Идентификатор связи (required)
     * @param body  (optional)
     * @return PersonEducation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PersonEducation personsPersonIdEducationIdPut(String personId, String id, PersonEducation body) throws ApiException {
        ApiResponse<PersonEducation> resp = personsPersonIdEducationIdPutWithHttpInfo(personId, id, body);
        return resp.getData();
    }

    /**
     * Изменение данных об обучении персоны
     * 
     * @param personId Идентификатор персоны (required)
     * @param id Идентификатор связи (required)
     * @param body  (optional)
     * @return ApiResponse&lt;PersonEducation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PersonEducation> personsPersonIdEducationIdPutWithHttpInfo(String personId, String id, PersonEducation body) throws ApiException {
        com.squareup.okhttp.Call call = personsPersonIdEducationIdPutValidateBeforeCall(personId, id, body, null, null);
        Type localVarReturnType = new TypeToken<PersonEducation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Изменение данных об обучении персоны (asynchronously)
     * 
     * @param personId Идентификатор персоны (required)
     * @param id Идентификатор связи (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdEducationIdPutAsync(String personId, String id, PersonEducation body, final ApiCallback<PersonEducation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsPersonIdEducationIdPutValidateBeforeCall(personId, id, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PersonEducation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for personsPersonIdIdsPut
     * @param personId Идентификатор персоны (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdIdsPutCall(String personId, Person body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/persons/{person_id}/ids"
            .replaceAll("\\{" + "person_id" + "\\}", apiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsPersonIdIdsPutValidateBeforeCall(String personId, Person body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling personsPersonIdIdsPut(Async)");
        }
        
        com.squareup.okhttp.Call call = personsPersonIdIdsPutCall(personId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Изменение идентификаторов персоны
     * 
     * @param personId Идентификатор персоны (required)
     * @param body  (optional)
     * @return Person
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Person personsPersonIdIdsPut(String personId, Person body) throws ApiException {
        ApiResponse<Person> resp = personsPersonIdIdsPutWithHttpInfo(personId, body);
        return resp.getData();
    }

    /**
     * Изменение идентификаторов персоны
     * 
     * @param personId Идентификатор персоны (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Person&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Person> personsPersonIdIdsPutWithHttpInfo(String personId, Person body) throws ApiException {
        com.squareup.okhttp.Call call = personsPersonIdIdsPutValidateBeforeCall(personId, body, null, null);
        Type localVarReturnType = new TypeToken<Person>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Изменение идентификаторов персоны (asynchronously)
     * 
     * @param personId Идентификатор персоны (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdIdsPutAsync(String personId, Person body, final ApiCallback<Person> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsPersonIdIdsPutValidateBeforeCall(personId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Person>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for personsPersonIdPreventionsIdPut
     * @param personId Идентификатор персоны (required)
     * @param id Идентификатор связи (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdPreventionsIdPutCall(String personId, String id, PersonPrevention body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/persons/{person_id}/preventions/{id}"
            .replaceAll("\\{" + "person_id" + "\\}", apiClient.escapeString(personId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsPersonIdPreventionsIdPutValidateBeforeCall(String personId, String id, PersonPrevention body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling personsPersonIdPreventionsIdPut(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling personsPersonIdPreventionsIdPut(Async)");
        }
        
        com.squareup.okhttp.Call call = personsPersonIdPreventionsIdPutCall(personId, id, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Изменение данных об учете персоны
     * 
     * @param personId Идентификатор персоны (required)
     * @param id Идентификатор связи (required)
     * @param body  (optional)
     * @return PersonPrevention
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PersonPrevention personsPersonIdPreventionsIdPut(String personId, String id, PersonPrevention body) throws ApiException {
        ApiResponse<PersonPrevention> resp = personsPersonIdPreventionsIdPutWithHttpInfo(personId, id, body);
        return resp.getData();
    }

    /**
     * Изменение данных об учете персоны
     * 
     * @param personId Идентификатор персоны (required)
     * @param id Идентификатор связи (required)
     * @param body  (optional)
     * @return ApiResponse&lt;PersonPrevention&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PersonPrevention> personsPersonIdPreventionsIdPutWithHttpInfo(String personId, String id, PersonPrevention body) throws ApiException {
        com.squareup.okhttp.Call call = personsPersonIdPreventionsIdPutValidateBeforeCall(personId, id, body, null, null);
        Type localVarReturnType = new TypeToken<PersonPrevention>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Изменение данных об учете персоны (asynchronously)
     * 
     * @param personId Идентификатор персоны (required)
     * @param id Идентификатор связи (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdPreventionsIdPutAsync(String personId, String id, PersonPrevention body, final ApiCallback<PersonPrevention> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsPersonIdPreventionsIdPutValidateBeforeCall(personId, id, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PersonPrevention>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateCategory
     * @param body Описание категории, которую нужно обновить (required)
     * @param id Идентификатор категории (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCategoryCall(Category body, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/categories/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCategoryValidateBeforeCall(Category body, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateCategory(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateCategory(Async)");
        }
        
        com.squareup.okhttp.Call call = updateCategoryCall(body, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Обновить описание созданной категории
     * 
     * @param body Описание категории, которую нужно обновить (required)
     * @param id Идентификатор категории (required)
     * @return Category
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Category updateCategory(Category body, Integer id) throws ApiException {
        ApiResponse<Category> resp = updateCategoryWithHttpInfo(body, id);
        return resp.getData();
    }

    /**
     * Обновить описание созданной категории
     * 
     * @param body Описание категории, которую нужно обновить (required)
     * @param id Идентификатор категории (required)
     * @return ApiResponse&lt;Category&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Category> updateCategoryWithHttpInfo(Category body, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = updateCategoryValidateBeforeCall(body, id, null, null);
        Type localVarReturnType = new TypeToken<Category>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Обновить описание созданной категории (asynchronously)
     * 
     * @param body Описание категории, которую нужно обновить (required)
     * @param id Идентификатор категории (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCategoryAsync(Category body, Integer id, final ApiCallback<Category> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCategoryValidateBeforeCall(body, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Category>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateClass
     * @param body Описание класса, который нужно обновить (required)
     * @param id Идентификатор версии класса (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateClassCall(ModelClass body, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/classes/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateClassValidateBeforeCall(ModelClass body, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateClass(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateClass(Async)");
        }
        
        com.squareup.okhttp.Call call = updateClassCall(body, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Обновить описание созданного класса
     * 
     * @param body Описание класса, который нужно обновить (required)
     * @param id Идентификатор версии класса (required)
     * @return ModelClass
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelClass updateClass(ModelClass body, String id) throws ApiException {
        ApiResponse<ModelClass> resp = updateClassWithHttpInfo(body, id);
        return resp.getData();
    }

    /**
     * Обновить описание созданного класса
     * 
     * @param body Описание класса, который нужно обновить (required)
     * @param id Идентификатор версии класса (required)
     * @return ApiResponse&lt;ModelClass&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelClass> updateClassWithHttpInfo(ModelClass body, String id) throws ApiException {
        com.squareup.okhttp.Call call = updateClassValidateBeforeCall(body, id, null, null);
        Type localVarReturnType = new TypeToken<ModelClass>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Обновить описание созданного класса (asynchronously)
     * 
     * @param body Описание класса, который нужно обновить (required)
     * @param id Идентификатор версии класса (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateClassAsync(ModelClass body, String id, final ApiCallback<ModelClass> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateClassValidateBeforeCall(body, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelClass>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
