/*
 * Copyright (c) 2020. Axetta LLC. All Rights Reserved.
 */

/*
 * API МЭШ.Контингент
 * Описание REST API МЭШ.Контингент
 *
 * OpenAPI spec version: 0.0.1
 * Contact: fixme@ktelabs.ru
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ru.iteco.client.api;

import ru.iteco.client.ApiCallback;
import ru.iteco.client.ApiClient;
import ru.iteco.client.ApiException;
import ru.iteco.client.ApiResponse;
import ru.iteco.client.Configuration;
import ru.iteco.client.Pair;
import ru.iteco.client.ProgressRequestBody;
import ru.iteco.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import ru.iteco.client.model.ModelClass;

import org.threeten.bp.OffsetDateTime;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ClassApi {
    private ApiClient apiClient;

    public ClassApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ClassApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addClass
     * @param body Описание класса, который нужно создать (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addClassCall(ModelClass body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/classes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addClassValidateBeforeCall(ModelClass body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addClass(Async)");
        }
        
        com.squareup.okhttp.Call call = addClassCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Создать класс
     * Метод создания класса
     * @param body Описание класса, который нужно создать (required)
     * @return ModelClass
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelClass addClass(ModelClass body) throws ApiException {
        ApiResponse<ModelClass> resp = addClassWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Создать класс
     * Метод создания класса
     * @param body Описание класса, который нужно создать (required)
     * @return ApiResponse&lt;ModelClass&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelClass> addClassWithHttpInfo(ModelClass body) throws ApiException {
        com.squareup.okhttp.Call call = addClassValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ModelClass>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Создать класс (asynchronously)
     * Метод создания класса
     * @param body Описание класса, который нужно создать (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addClassAsync(ModelClass body, final ApiCallback<ModelClass> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addClassValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelClass>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for classesGet
     * @param filter сериализованная коллекция /components/schemas/Filter (required)
     * @param expand Список полей, которые должны быть в ответе, через запятую (optional)
     * @param top Количество возвращаемых записей. Значение по умолчанию задается в параметрах Системы. (optional)
     * @param skip Количество пропускаемых записей. По умолчанию, 0. (optional)
     * @param orderby Cписок полей, по которым требуется сортировать, через запятую (optional)
     * @param actualOn Дата актуальности данных. По умолчанию, текущая. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call classesGetCall(String filter, String expand, String top, String skip, String orderby, OffsetDateTime actualOn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/classes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("expand", expand));
        if (top != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("top", top));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (orderby != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderby", orderby));
        if (actualOn != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("actual_on", actualOn));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call classesGetValidateBeforeCall(String filter, String expand, String top, String skip, String orderby, OffsetDateTime actualOn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'filter' is set
        if (filter == null) {
            throw new ApiException("Missing the required parameter 'filter' when calling classesGet(Async)");
        }
        
        com.squareup.okhttp.Call call = classesGetCall(filter, expand, top, skip, orderby, actualOn, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Поиск классов
     * 
     * @param filter сериализованная коллекция /components/schemas/Filter (required)
     * @param expand Список полей, которые должны быть в ответе, через запятую (optional)
     * @param top Количество возвращаемых записей. Значение по умолчанию задается в параметрах Системы. (optional)
     * @param skip Количество пропускаемых записей. По умолчанию, 0. (optional)
     * @param orderby Cписок полей, по которым требуется сортировать, через запятую (optional)
     * @param actualOn Дата актуальности данных. По умолчанию, текущая. (optional)
     * @return List&lt;ModelClass&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ModelClass> classesGet(String filter, String expand, String top, String skip, String orderby, OffsetDateTime actualOn) throws ApiException {
        ApiResponse<List<ModelClass>> resp = classesGetWithHttpInfo(filter, expand, top, skip, orderby, actualOn);
        return resp.getData();
    }

    /**
     * Поиск классов
     * 
     * @param filter сериализованная коллекция /components/schemas/Filter (required)
     * @param expand Список полей, которые должны быть в ответе, через запятую (optional)
     * @param top Количество возвращаемых записей. Значение по умолчанию задается в параметрах Системы. (optional)
     * @param skip Количество пропускаемых записей. По умолчанию, 0. (optional)
     * @param orderby Cписок полей, по которым требуется сортировать, через запятую (optional)
     * @param actualOn Дата актуальности данных. По умолчанию, текущая. (optional)
     * @return ApiResponse&lt;List&lt;ModelClass&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ModelClass>> classesGetWithHttpInfo(String filter, String expand, String top, String skip, String orderby, OffsetDateTime actualOn) throws ApiException {
        com.squareup.okhttp.Call call = classesGetValidateBeforeCall(filter, expand, top, skip, orderby, actualOn, null, null);
        Type localVarReturnType = new TypeToken<List<ModelClass>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Поиск классов (asynchronously)
     * 
     * @param filter сериализованная коллекция /components/schemas/Filter (required)
     * @param expand Список полей, которые должны быть в ответе, через запятую (optional)
     * @param top Количество возвращаемых записей. Значение по умолчанию задается в параметрах Системы. (optional)
     * @param skip Количество пропускаемых записей. По умолчанию, 0. (optional)
     * @param orderby Cписок полей, по которым требуется сортировать, через запятую (optional)
     * @param actualOn Дата актуальности данных. По умолчанию, текущая. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call classesGetAsync(String filter, String expand, String top, String skip, String orderby, OffsetDateTime actualOn, final ApiCallback<List<ModelClass>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = classesGetValidateBeforeCall(filter, expand, top, skip, orderby, actualOn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ModelClass>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteClass
     * @param id Идентификатор версии класса (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteClassCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/classes/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteClassValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteClass(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteClassCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Удаление класса
     * Помечает класс как удаленный
     * @param id Идентификатор версии класса (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteClass(String id) throws ApiException {
        deleteClassWithHttpInfo(id);
    }

    /**
     * Удаление класса
     * Помечает класс как удаленный
     * @param id Идентификатор версии класса (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteClassWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = deleteClassValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Удаление класса (asynchronously)
     * Помечает класс как удаленный
     * @param id Идентификатор версии класса (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteClassAsync(String id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteClassValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getClassById
     * @param id Идентификатор класса (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getClassByIdCall(UUID id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/classes/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getClassByIdValidateBeforeCall(UUID id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getClassById(Async)");
        }
        
        com.squareup.okhttp.Call call = getClassByIdCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Получить класс по идентификатору
     * 
     * @param id Идентификатор класса (required)
     * @return ModelClass
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelClass getClassById(UUID id) throws ApiException {
        ApiResponse<ModelClass> resp = getClassByIdWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Получить класс по идентификатору
     * 
     * @param id Идентификатор класса (required)
     * @return ApiResponse&lt;ModelClass&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelClass> getClassByIdWithHttpInfo(UUID id) throws ApiException {
        com.squareup.okhttp.Call call = getClassByIdValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<ModelClass>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Получить класс по идентификатору (asynchronously)
     * 
     * @param id Идентификатор класса (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getClassByIdAsync(UUID id, final ApiCallback<ModelClass> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getClassByIdValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelClass>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateClass
     * @param body Описание класса, который нужно обновить (required)
     * @param id Идентификатор версии класса (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateClassCall(ModelClass body, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/classes/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateClassValidateBeforeCall(ModelClass body, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateClass(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateClass(Async)");
        }
        
        com.squareup.okhttp.Call call = updateClassCall(body, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Обновить описание созданного класса
     * 
     * @param body Описание класса, который нужно обновить (required)
     * @param id Идентификатор версии класса (required)
     * @return ModelClass
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelClass updateClass(ModelClass body, String id) throws ApiException {
        ApiResponse<ModelClass> resp = updateClassWithHttpInfo(body, id);
        return resp.getData();
    }

    /**
     * Обновить описание созданного класса
     * 
     * @param body Описание класса, который нужно обновить (required)
     * @param id Идентификатор версии класса (required)
     * @return ApiResponse&lt;ModelClass&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelClass> updateClassWithHttpInfo(ModelClass body, String id) throws ApiException {
        com.squareup.okhttp.Call call = updateClassValidateBeforeCall(body, id, null, null);
        Type localVarReturnType = new TypeToken<ModelClass>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Обновить описание созданного класса (asynchronously)
     * 
     * @param body Описание класса, который нужно обновить (required)
     * @param id Идентификатор версии класса (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateClassAsync(ModelClass body, String id, final ApiCallback<ModelClass> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateClassValidateBeforeCall(body, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelClass>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
