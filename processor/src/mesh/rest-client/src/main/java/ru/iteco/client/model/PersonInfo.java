/*
 * Copyright (c) 2020. Axetta LLC. All Rights Reserved.
 */

/*
 * API МЭШ.Контингент
 * Описание REST API МЭШ.Контингент
 *
 * OpenAPI spec version: 0.0.1
 * Contact: fixme@ktelabs.ru
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ru.iteco.client.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;
/**
 * Основные данные персоны
 */
@Schema(description = "Основные данные персоны")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-07-28T06:28:05.879Z[GMT]")
public class PersonInfo {
  @SerializedName("id")
  private Long id = null;

  @SerializedName("person_id")
  private UUID personId = null;

  @SerializedName("merged_to")
  private UUID mergedTo = null;

  @SerializedName("lastname")
  private String lastname = null;

  @SerializedName("firstname")
  private String firstname = null;

  @SerializedName("patronymic")
  private String patronymic = null;

  @SerializedName("birthdate")
  private LocalDate birthdate = null;

  @SerializedName("birthplace")
  private String birthplace = null;

  @SerializedName("snils")
  private String snils = null;

  @SerializedName("gender_id")
  private Integer genderId = null;

  @SerializedName("citizenship_id")
  private Integer citizenshipId = null;

  @SerializedName("validation_state_id")
  private Integer validationStateId = null;

  @SerializedName("validated_at")
  private OffsetDateTime validatedAt = null;

  @SerializedName("actual_from")
  private OffsetDateTime actualFrom = null;

  @SerializedName("actual_to")
  private OffsetDateTime actualTo = null;

  @SerializedName("created_by")
  private UUID createdBy = null;

  @SerializedName("updated_by")
  private UUID updatedBy = null;

  @SerializedName("created_at")
  private OffsetDateTime createdAt = null;

  @SerializedName("updated_at")
  private OffsetDateTime updatedAt = null;

  @SerializedName("addresses")
  private List<PersonAddress> addresses = null;

  @SerializedName("documents")
  private List<PersonDocument> documents = null;

  @SerializedName("contacts")
  private List<PersonContact> contacts = null;

  @SerializedName("preventions")
  private List<PersonPrevention> preventions = null;

  @SerializedName("categories")
  private List<PersonCategory> categories = null;

  @SerializedName("ids")
  private Person ids = null;

  @SerializedName("agents")
  private List<PersonAgent> agents = null;

  @SerializedName("children")
  private List<PersonAgent> children = null;

  @SerializedName("education")
  private List<PersonEducation> education = null;

  @SerializedName("citizenship")
  private Citizenship citizenship = null;

  @SerializedName("validation_errors")
  private String validationErrors = null;

  public PersonInfo id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Идентификатор
   * @return id
  **/
  @Schema(required = true, description = "Идентификатор")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public PersonInfo personId(UUID personId) {
    this.personId = personId;
    return this;
  }

   /**
   * Ссылка на идентификатор персоны в рамках системы
   * @return personId
  **/
  @Schema(required = true, description = "Ссылка на идентификатор персоны в рамках системы")
  public UUID getPersonId() {
    return personId;
  }

  public void setPersonId(UUID personId) {
    this.personId = personId;
  }

  public PersonInfo mergedTo(UUID mergedTo) {
    this.mergedTo = mergedTo;
    return this;
  }

   /**
   * Ссылка на персону, с которой была слита данная
   * @return mergedTo
  **/
  @Schema(description = "Ссылка на персону, с которой была слита данная")
  public UUID getMergedTo() {
    return mergedTo;
  }

  public void setMergedTo(UUID mergedTo) {
    this.mergedTo = mergedTo;
  }

  public PersonInfo lastname(String lastname) {
    this.lastname = lastname;
    return this;
  }

   /**
   * Фамилия
   * @return lastname
  **/
  @Schema(required = true, description = "Фамилия")
  public String getLastname() {
    return lastname;
  }

  public void setLastname(String lastname) {
    this.lastname = lastname;
  }

  public PersonInfo firstname(String firstname) {
    this.firstname = firstname;
    return this;
  }

   /**
   * Имя
   * @return firstname
  **/
  @Schema(required = true, description = "Имя")
  public String getFirstname() {
    return firstname;
  }

  public void setFirstname(String firstname) {
    this.firstname = firstname;
  }

  public PersonInfo patronymic(String patronymic) {
    this.patronymic = patronymic;
    return this;
  }

   /**
   * Отчество
   * @return patronymic
  **/
  @Schema(description = "Отчество")
  public String getPatronymic() {
    return patronymic;
  }

  public void setPatronymic(String patronymic) {
    this.patronymic = patronymic;
  }

  public PersonInfo birthdate(LocalDate birthdate) {
    this.birthdate = birthdate;
    return this;
  }

   /**
   * Дата рождения
   * @return birthdate
  **/
  @Schema(required = true, description = "Дата рождения")
  public LocalDate getBirthdate() {
    return birthdate;
  }

  public void setBirthdate(LocalDate birthdate) {
    this.birthdate = birthdate;
  }

  public PersonInfo birthplace(String birthplace) {
    this.birthplace = birthplace;
    return this;
  }

   /**
   * Место рождения
   * @return birthplace
  **/
  @Schema(description = "Место рождения")
  public String getBirthplace() {
    return birthplace;
  }

  public void setBirthplace(String birthplace) {
    this.birthplace = birthplace;
  }

  public PersonInfo snils(String snils) {
    this.snils = snils;
    return this;
  }

   /**
   * Номер СНИЛС
   * @return snils
  **/
  @Schema(description = "Номер СНИЛС")
  public String getSnils() {
    return snils;
  }

  public void setSnils(String snils) {
    this.snils = snils;
  }

  public PersonInfo genderId(Integer genderId) {
    this.genderId = genderId;
    return this;
  }

   /**
   * Пол (каталог НСИ3 &lt;a href&#x3D;\&quot;https://wiki.edu.mos.ru/pages/viewpage.action?pageId&#x3D;18394317\&quot;&gt;GENDER&lt;/href&gt;)
   * @return genderId
  **/
  @Schema(required = true, description = "Пол (каталог НСИ3 <a href=\"https://wiki.edu.mos.ru/pages/viewpage.action?pageId=18394317\">GENDER</href>)")
  public Integer getGenderId() {
    return genderId;
  }

  public void setGenderId(Integer genderId) {
    this.genderId = genderId;
  }

  public PersonInfo citizenshipId(Integer citizenshipId) {
    this.citizenshipId = citizenshipId;
    return this;
  }

   /**
   * Код страны по справочнику ОКСМ (каталог НСИ3 &lt;a href&#x3D;\&quot;https://wiki.edu.mos.ru/pages/viewpage.action?pageId&#x3D;18394242\&quot;&gt;COUNTRY&lt;/href&gt;)
   * @return citizenshipId
  **/
  @Schema(description = "Код страны по справочнику ОКСМ (каталог НСИ3 <a href=\"https://wiki.edu.mos.ru/pages/viewpage.action?pageId=18394242\">COUNTRY</href>)")
  public Integer getCitizenshipId() {
    return citizenshipId;
  }

  public void setCitizenshipId(Integer citizenshipId) {
    this.citizenshipId = citizenshipId;
  }

  public PersonInfo validationStateId(Integer validationStateId) {
    this.validationStateId = validationStateId;
    return this;
  }

   /**
   * Статус проверки
   * @return validationStateId
  **/
  @Schema(description = "Статус проверки")
  public Integer getValidationStateId() {
    return validationStateId;
  }

  public void setValidationStateId(Integer validationStateId) {
    this.validationStateId = validationStateId;
  }

  public PersonInfo validatedAt(OffsetDateTime validatedAt) {
    this.validatedAt = validatedAt;
    return this;
  }

   /**
   * Дата проверки
   * @return validatedAt
  **/
  @Schema(description = "Дата проверки")
  public OffsetDateTime getValidatedAt() {
    return validatedAt;
  }

  public void setValidatedAt(OffsetDateTime validatedAt) {
    this.validatedAt = validatedAt;
  }

  public PersonInfo actualFrom(OffsetDateTime actualFrom) {
    this.actualFrom = actualFrom;
    return this;
  }

   /**
   * Дата и время начала действия версии персоны
   * @return actualFrom
  **/
  @Schema(description = "Дата и время начала действия версии персоны")
  public OffsetDateTime getActualFrom() {
    return actualFrom;
  }

  public void setActualFrom(OffsetDateTime actualFrom) {
    this.actualFrom = actualFrom;
  }

  public PersonInfo actualTo(OffsetDateTime actualTo) {
    this.actualTo = actualTo;
    return this;
  }

   /**
   * Дата и время окончания действия версии персоны
   * @return actualTo
  **/
  @Schema(description = "Дата и время окончания действия версии персоны")
  public OffsetDateTime getActualTo() {
    return actualTo;
  }

  public void setActualTo(OffsetDateTime actualTo) {
    this.actualTo = actualTo;
  }

  public PersonInfo createdBy(UUID createdBy) {
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Идентификатор системы-источника
   * @return createdBy
  **/
  @Schema(description = "Идентификатор системы-источника")
  public UUID getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(UUID createdBy) {
    this.createdBy = createdBy;
  }

  public PersonInfo updatedBy(UUID updatedBy) {
    this.updatedBy = updatedBy;
    return this;
  }

   /**
   * Идентификатор системы-источника
   * @return updatedBy
  **/
  @Schema(description = "Идентификатор системы-источника")
  public UUID getUpdatedBy() {
    return updatedBy;
  }

  public void setUpdatedBy(UUID updatedBy) {
    this.updatedBy = updatedBy;
  }

  public PersonInfo createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Дата и время создания
   * @return createdAt
  **/
  @Schema(description = "Дата и время создания")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }

  public PersonInfo updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Дата и время изменения
   * @return updatedAt
  **/
  @Schema(description = "Дата и время изменения")
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }

  public PersonInfo addresses(List<PersonAddress> addresses) {
    this.addresses = addresses;
    return this;
  }

  public PersonInfo addAddressesItem(PersonAddress addressesItem) {
    if (this.addresses == null) {
      this.addresses = new ArrayList<PersonAddress>();
    }
    this.addresses.add(addressesItem);
    return this;
  }

   /**
   * Адреса персоны
   * @return addresses
  **/
  @Schema(description = "Адреса персоны")
  public List<PersonAddress> getAddresses() {
    return addresses;
  }

  public void setAddresses(List<PersonAddress> addresses) {
    this.addresses = addresses;
  }

  public PersonInfo documents(List<PersonDocument> documents) {
    this.documents = documents;
    return this;
  }

  public PersonInfo addDocumentsItem(PersonDocument documentsItem) {
    if (this.documents == null) {
      this.documents = new ArrayList<PersonDocument>();
    }
    this.documents.add(documentsItem);
    return this;
  }

   /**
   * Документы персоны
   * @return documents
  **/
  @Schema(description = "Документы персоны")
  public List<PersonDocument> getDocuments() {
    return documents;
  }

  public void setDocuments(List<PersonDocument> documents) {
    this.documents = documents;
  }

  public PersonInfo contacts(List<PersonContact> contacts) {
    this.contacts = contacts;
    return this;
  }

  public PersonInfo addContactsItem(PersonContact contactsItem) {
    if (this.contacts == null) {
      this.contacts = new ArrayList<PersonContact>();
    }
    this.contacts.add(contactsItem);
    return this;
  }

   /**
   * Контакты персоны
   * @return contacts
  **/
  @Schema(description = "Контакты персоны")
  public List<PersonContact> getContacts() {
    return contacts;
  }

  public void setContacts(List<PersonContact> contacts) {
    this.contacts = contacts;
  }

  public PersonInfo preventions(List<PersonPrevention> preventions) {
    this.preventions = preventions;
    return this;
  }

  public PersonInfo addPreventionsItem(PersonPrevention preventionsItem) {
    if (this.preventions == null) {
      this.preventions = new ArrayList<PersonPrevention>();
    }
    this.preventions.add(preventionsItem);
    return this;
  }

   /**
   * Инфомация о постановках на учет
   * @return preventions
  **/
  @Schema(description = "Инфомация о постановках на учет")
  public List<PersonPrevention> getPreventions() {
    return preventions;
  }

  public void setPreventions(List<PersonPrevention> preventions) {
    this.preventions = preventions;
  }

  public PersonInfo categories(List<PersonCategory> categories) {
    this.categories = categories;
    return this;
  }

  public PersonInfo addCategoriesItem(PersonCategory categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<PersonCategory>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

   /**
   * Get categories
   * @return categories
  **/
  @Schema(description = "")
  public List<PersonCategory> getCategories() {
    return categories;
  }

  public void setCategories(List<PersonCategory> categories) {
    this.categories = categories;
  }

  public PersonInfo ids(Person ids) {
    this.ids = ids;
    return this;
  }

   /**
   * Get ids
   * @return ids
  **/
  @Schema(description = "")
  public Person getIds() {
    return ids;
  }

  public void setIds(Person ids) {
    this.ids = ids;
  }

  public PersonInfo agents(List<PersonAgent> agents) {
    this.agents = agents;
    return this;
  }

  public PersonInfo addAgentsItem(PersonAgent agentsItem) {
    if (this.agents == null) {
      this.agents = new ArrayList<PersonAgent>();
    }
    this.agents.add(agentsItem);
    return this;
  }

   /**
   * Список представителей
   * @return agents
  **/
  @Schema(description = "Список представителей")
  public List<PersonAgent> getAgents() {
    return agents;
  }

  public void setAgents(List<PersonAgent> agents) {
    this.agents = agents;
  }

  public PersonInfo children(List<PersonAgent> children) {
    this.children = children;
    return this;
  }

  public PersonInfo addChildrenItem(PersonAgent childrenItem) {
    if (this.children == null) {
      this.children = new ArrayList<PersonAgent>();
    }
    this.children.add(childrenItem);
    return this;
  }

   /**
   * Список детей
   * @return children
  **/
  @Schema(description = "Список детей")
  public List<PersonAgent> getChildren() {
    return children;
  }

  public void setChildren(List<PersonAgent> children) {
    this.children = children;
  }

  public PersonInfo education(List<PersonEducation> education) {
    this.education = education;
    return this;
  }

  public PersonInfo addEducationItem(PersonEducation educationItem) {
    if (this.education == null) {
      this.education = new ArrayList<PersonEducation>();
    }
    this.education.add(educationItem);
    return this;
  }

   /**
   * ОО, в которых персона проходила или проходит обучение
   * @return education
  **/
  @Schema(description = "ОО, в которых персона проходила или проходит обучение")
  public List<PersonEducation> getEducation() {
    return education;
  }

  public void setEducation(List<PersonEducation> education) {
    this.education = education;
  }

  public PersonInfo citizenship(Citizenship citizenship) {
    this.citizenship = citizenship;
    return this;
  }

   /**
   * Get citizenship
   * @return citizenship
  **/
  @Schema(description = "")
  public Citizenship getCitizenship() {
    return citizenship;
  }

  public void setCitizenship(Citizenship citizenship) {
    this.citizenship = citizenship;
  }

  public PersonInfo validationErrors(String validationErrors) {
    this.validationErrors = validationErrors;
    return this;
  }

   /**
   * Ошибки валидации из внешних систем
   * @return validationErrors
  **/
  @Schema(description = "Ошибки валидации из внешних систем")
  public String getValidationErrors() {
    return validationErrors;
  }

  public void setValidationErrors(String validationErrors) {
    this.validationErrors = validationErrors;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PersonInfo personInfo = (PersonInfo) o;
    return Objects.equals(this.id, personInfo.id) &&
        Objects.equals(this.personId, personInfo.personId) &&
        Objects.equals(this.mergedTo, personInfo.mergedTo) &&
        Objects.equals(this.lastname, personInfo.lastname) &&
        Objects.equals(this.firstname, personInfo.firstname) &&
        Objects.equals(this.patronymic, personInfo.patronymic) &&
        Objects.equals(this.birthdate, personInfo.birthdate) &&
        Objects.equals(this.birthplace, personInfo.birthplace) &&
        Objects.equals(this.snils, personInfo.snils) &&
        Objects.equals(this.genderId, personInfo.genderId) &&
        Objects.equals(this.citizenshipId, personInfo.citizenshipId) &&
        Objects.equals(this.validationStateId, personInfo.validationStateId) &&
        Objects.equals(this.validatedAt, personInfo.validatedAt) &&
        Objects.equals(this.actualFrom, personInfo.actualFrom) &&
        Objects.equals(this.actualTo, personInfo.actualTo) &&
        Objects.equals(this.createdBy, personInfo.createdBy) &&
        Objects.equals(this.updatedBy, personInfo.updatedBy) &&
        Objects.equals(this.createdAt, personInfo.createdAt) &&
        Objects.equals(this.updatedAt, personInfo.updatedAt) &&
        Objects.equals(this.addresses, personInfo.addresses) &&
        Objects.equals(this.documents, personInfo.documents) &&
        Objects.equals(this.contacts, personInfo.contacts) &&
        Objects.equals(this.preventions, personInfo.preventions) &&
        Objects.equals(this.categories, personInfo.categories) &&
        Objects.equals(this.ids, personInfo.ids) &&
        Objects.equals(this.agents, personInfo.agents) &&
        Objects.equals(this.children, personInfo.children) &&
        Objects.equals(this.education, personInfo.education) &&
        Objects.equals(this.citizenship, personInfo.citizenship) &&
        Objects.equals(this.validationErrors, personInfo.validationErrors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, personId, mergedTo, lastname, firstname, patronymic, birthdate, birthplace, snils, genderId, citizenshipId, validationStateId, validatedAt, actualFrom, actualTo, createdBy, updatedBy, createdAt, updatedAt, addresses, documents, contacts, preventions, categories, ids, agents, children, education, citizenship, validationErrors);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PersonInfo {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    personId: ").append(toIndentedString(personId)).append("\n");
    sb.append("    mergedTo: ").append(toIndentedString(mergedTo)).append("\n");
    sb.append("    lastname: ").append(toIndentedString(lastname)).append("\n");
    sb.append("    firstname: ").append(toIndentedString(firstname)).append("\n");
    sb.append("    patronymic: ").append(toIndentedString(patronymic)).append("\n");
    sb.append("    birthdate: ").append(toIndentedString(birthdate)).append("\n");
    sb.append("    birthplace: ").append(toIndentedString(birthplace)).append("\n");
    sb.append("    snils: ").append(toIndentedString(snils)).append("\n");
    sb.append("    genderId: ").append(toIndentedString(genderId)).append("\n");
    sb.append("    citizenshipId: ").append(toIndentedString(citizenshipId)).append("\n");
    sb.append("    validationStateId: ").append(toIndentedString(validationStateId)).append("\n");
    sb.append("    validatedAt: ").append(toIndentedString(validatedAt)).append("\n");
    sb.append("    actualFrom: ").append(toIndentedString(actualFrom)).append("\n");
    sb.append("    actualTo: ").append(toIndentedString(actualTo)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    updatedBy: ").append(toIndentedString(updatedBy)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    addresses: ").append(toIndentedString(addresses)).append("\n");
    sb.append("    documents: ").append(toIndentedString(documents)).append("\n");
    sb.append("    contacts: ").append(toIndentedString(contacts)).append("\n");
    sb.append("    preventions: ").append(toIndentedString(preventions)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    ids: ").append(toIndentedString(ids)).append("\n");
    sb.append("    agents: ").append(toIndentedString(agents)).append("\n");
    sb.append("    children: ").append(toIndentedString(children)).append("\n");
    sb.append("    education: ").append(toIndentedString(education)).append("\n");
    sb.append("    citizenship: ").append(toIndentedString(citizenship)).append("\n");
    sb.append("    validationErrors: ").append(toIndentedString(validationErrors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
