/*
 * Copyright (c) 2020. Axetta LLC. All Rights Reserved.
 */

/*
 * API МЭШ.Контингент
 * Описание REST API МЭШ.Контингент
 *
 * OpenAPI spec version: 0.0.1
 * Contact: fixme@ktelabs.ru
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ru.iteco.client.api;

import ru.iteco.client.ApiCallback;
import ru.iteco.client.ApiClient;
import ru.iteco.client.ApiException;
import ru.iteco.client.ApiResponse;
import ru.iteco.client.Configuration;
import ru.iteco.client.Pair;
import ru.iteco.client.ProgressRequestBody;
import ru.iteco.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import ru.iteco.client.model.Body;
import ru.iteco.client.model.Body1;

import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;

import ru.iteco.client.model.Person;
import ru.iteco.client.model.PersonAddress;
import ru.iteco.client.model.PersonAgent;
import ru.iteco.client.model.PersonCategory;
import ru.iteco.client.model.PersonContact;
import ru.iteco.client.model.PersonDocument;
import ru.iteco.client.model.PersonEducation;
import ru.iteco.client.model.PersonInfo;
import ru.iteco.client.model.PersonPrevention;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PersonApi {

    private ApiClient apiClient;

    public PersonApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PersonApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for personsBatchEducationPost
     *
     * @param body                    (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsBatchEducationPostCall(List<PersonEducation> body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/persons/batch/education";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                        throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"ApiKeyAuth"};
        return apiClient
                .buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                        localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsBatchEducationPostValidateBeforeCall(List<PersonEducation> body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        com.squareup.okhttp.Call call = personsBatchEducationPostCall(body, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Пакетное создание данных об обучении персоны
     *
     * @param body (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void personsBatchEducationPost(List<PersonEducation> body) throws ApiException {
        personsBatchEducationPostWithHttpInfo(body);
    }

    /**
     * Пакетное создание данных об обучении персоны
     *
     * @param body (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> personsBatchEducationPostWithHttpInfo(List<PersonEducation> body) throws ApiException {
        com.squareup.okhttp.Call call = personsBatchEducationPostValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Пакетное создание данных об обучении персоны (asynchronously)
     *
     * @param body     (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsBatchEducationPostAsync(List<PersonEducation> body,
            final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsBatchEducationPostValidateBeforeCall(body, progressListener,
                progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for personsBatchEducationPut
     *
     * @param body                    (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsBatchEducationPutCall(List<PersonEducation> body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/persons/batch/education";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                        throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"ApiKeyAuth"};
        return apiClient
                .buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                        localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsBatchEducationPutValidateBeforeCall(List<PersonEducation> body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        com.squareup.okhttp.Call call = personsBatchEducationPutCall(body, progressListener, progressRequestListener);
        return call;


    }

    /**
     * Пакетное изменение данных об обучении персоны
     *
     * @param body (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void personsBatchEducationPut(List<PersonEducation> body) throws ApiException {
        personsBatchEducationPutWithHttpInfo(body);
    }

    /**
     * Пакетное изменение данных об обучении персоны
     *
     * @param body (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> personsBatchEducationPutWithHttpInfo(List<PersonEducation> body) throws ApiException {
        com.squareup.okhttp.Call call = personsBatchEducationPutValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Пакетное изменение данных об обучении персоны (asynchronously)
     *
     * @param body     (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsBatchEducationPutAsync(List<PersonEducation> body,
            final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsBatchEducationPutValidateBeforeCall(body, progressListener,
                progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for personsGet
     *
     * @param filter                  сериализованная коллекция /components/schemas/Filter (required)
     * @param expand                  Список полей, которые должны быть \&quot;раскрыты\&quot; в ответе. Перечисляются через запятую. Если параметр не указан, возвращаются только основные данные персоны. (optional)
     * @param top                     Количество возвращаемых записей. Значение по умолчанию задается в параметрах Системы. (optional)
     * @param skip                    Количество пропускаемых записей. По умолчанию, 0. (optional)
     * @param orderby                 Cписок полей, по которым требуется сортировать, через запятую (optional)
     * @param actualOn                Дата актуальности данных. По умолчанию, текущая. Пример: 2019-12-01T00:00:00.000Z (optional)
     * @param trainingOn              Дата нахождения в ОО/классе. Пример: 2019-12-01. По умолчанию, не установлена для возможности искать персоны, которые нигде не обучаются. (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsGetCall(String filter, String expand, String top, String skip,
            String orderby, OffsetDateTime actualOn, LocalDate trainingOn,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        }
        if (expand != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("expand", expand));
        }
        if (top != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("top", top));
        }
        if (skip != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        }
        if (orderby != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("orderby", orderby));
        }
        if (actualOn != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("actual_on", actualOn));
        }
        if (trainingOn != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("training_on", trainingOn));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                        throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"ApiKeyAuth"};
        return apiClient
                .buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                        localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsGetValidateBeforeCall(String filter, String expand, String top, String skip,
            String orderby, OffsetDateTime actualOn, LocalDate trainingOn,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'filter' is set
        if (filter == null) {
            throw new ApiException("Missing the required parameter 'filter' when calling personsGet(Async)");
        }

        com.squareup.okhttp.Call call = personsGetCall(filter, expand, top, skip, orderby, actualOn, trainingOn,
                progressListener, progressRequestListener);
        return call;


    }

    public List<PersonInfo> getActualPersonsByFilter(String filter, String expend, String top, String skip,
            String orderBy) throws ApiException {
        return this.personsGet(filter, expend, top, skip, orderBy, OffsetDateTime.now(), null);
    }

    /**
     * Поиск персон
     *
     * @param filter     сериализованная коллекция /components/schemas/Filter (required)
     * @param expand     Список полей, которые должны быть \&quot;раскрыты\&quot; в ответе. Перечисляются через запятую. Если параметр не указан, возвращаются только основные данные персоны. (optional)
     * @param top        Количество возвращаемых записей. Значение по умолчанию задается в параметрах Системы. (optional)
     * @param skip       Количество пропускаемых записей. По умолчанию, 0. (optional)
     * @param orderby    Cписок полей, по которым требуется сортировать, через запятую (optional)
     * @param actualOn   Дата актуальности данных. По умолчанию, текущая. Пример: 2019-12-01T00:00:00.000Z (optional)
     * @param trainingOn Дата нахождения в ОО/классе. Пример: 2019-12-01. По умолчанию, не установлена для возможности искать персоны, которые нигде не обучаются. (optional)
     * @return List&lt;PersonInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */

    public List<PersonInfo> personsGet(String filter, String expand, String top, String skip, String orderby,
            OffsetDateTime actualOn, LocalDate trainingOn) throws ApiException {
        ApiResponse<List<PersonInfo>> resp = personsGetWithHttpInfo(filter, expand, top, skip, orderby, actualOn,
                trainingOn);
        return resp.getData();
    }

    /**
     * Поиск персон
     *
     * @param filter     сериализованная коллекция /components/schemas/Filter (required)
     * @param expand     Список полей, которые должны быть \&quot;раскрыты\&quot; в ответе. Перечисляются через запятую. Если параметр не указан, возвращаются только основные данные персоны. (optional)
     * @param top        Количество возвращаемых записей. Значение по умолчанию задается в параметрах Системы. (optional)
     * @param skip       Количество пропускаемых записей. По умолчанию, 0. (optional)
     * @param orderby    Cписок полей, по которым требуется сортировать, через запятую (optional)
     * @param actualOn   Дата актуальности данных. По умолчанию, текущая. Пример: 2019-12-01T00:00:00.000Z (optional)
     * @param trainingOn Дата нахождения в ОО/классе. Пример: 2019-12-01. По умолчанию, не установлена для возможности искать персоны, которые нигде не обучаются. (optional)
     * @return ApiResponse&lt;List&lt;PersonInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PersonInfo>> personsGetWithHttpInfo(String filter, String expand, String top, String skip,
            String orderby, OffsetDateTime actualOn, LocalDate trainingOn) throws ApiException {
        com.squareup.okhttp.Call call = personsGetValidateBeforeCall(filter, expand, top, skip, orderby, actualOn,
                trainingOn, null, null);
        Type localVarReturnType = new TypeToken<List<PersonInfo>>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Поиск персон (asynchronously)
     *
     * @param filter     сериализованная коллекция /components/schemas/Filter (required)
     * @param expand     Список полей, которые должны быть \&quot;раскрыты\&quot; в ответе. Перечисляются через запятую. Если параметр не указан, возвращаются только основные данные персоны. (optional)
     * @param top        Количество возвращаемых записей. Значение по умолчанию задается в параметрах Системы. (optional)
     * @param skip       Количество пропускаемых записей. По умолчанию, 0. (optional)
     * @param orderby    Cписок полей, по которым требуется сортировать, через запятую (optional)
     * @param actualOn   Дата актуальности данных. По умолчанию, текущая. Пример: 2019-12-01T00:00:00.000Z (optional)
     * @param trainingOn Дата нахождения в ОО/классе. Пример: 2019-12-01. По умолчанию, не установлена для возможности искать персоны, которые нигде не обучаются. (optional)
     * @param callback   The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsGetAsync(String filter, String expand, String top, String skip,
            String orderby, OffsetDateTime actualOn, LocalDate trainingOn, final ApiCallback<List<PersonInfo>> callback)
            throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsGetValidateBeforeCall(filter, expand, top, skip, orderby, actualOn,
                trainingOn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PersonInfo>>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for personsIdGet
     *
     * @param id                      Идентификатор персоны&lt;/br&gt; (пример \&quot;449ab5bd-4f09-47a0-ba89-70ae2cd49692\&quot;) (required)
     * @param actualOn                Дата актуальности (optional)
     * @param expand                  Список полей, которые должны быть \&quot;раскрыты\&quot; в ответе. Перечисляются через запятую. Если параметр не указан, возвращаются только основные данные персоны. (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsIdGetCall(String id, OffsetDateTime actualOn, String expand,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/{id}".replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (actualOn != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("actual_on", actualOn));
        }
        if (expand != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("expand", expand));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                        throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"ApiKeyAuth"};
        return apiClient
                .buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                        localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsIdGetValidateBeforeCall(String id, OffsetDateTime actualOn, String expand,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling personsIdGet(Async)");
        }

        com.squareup.okhttp.Call call = personsIdGetCall(id, actualOn, expand, progressListener,
                progressRequestListener);
        return call;


    }

    /**
     * Получить персону по идентификатору
     *
     * @param id       Идентификатор персоны&lt;/br&gt; (пример \&quot;449ab5bd-4f09-47a0-ba89-70ae2cd49692\&quot;) (required)
     * @param actualOn Дата актуальности (optional)
     * @param expand   Список полей, которые должны быть \&quot;раскрыты\&quot; в ответе. Перечисляются через запятую. Если параметр не указан, возвращаются только основные данные персоны. (optional)
     * @return PersonInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PersonInfo personsIdGet(String id, OffsetDateTime actualOn, String expand) throws ApiException {
        ApiResponse<PersonInfo> resp = personsIdGetWithHttpInfo(id, actualOn, expand);
        return resp.getData();
    }

    /**
     * Получить персону по идентификатору
     *
     * @param id       Идентификатор персоны&lt;/br&gt; (пример \&quot;449ab5bd-4f09-47a0-ba89-70ae2cd49692\&quot;) (required)
     * @param actualOn Дата актуальности (optional)
     * @param expand   Список полей, которые должны быть \&quot;раскрыты\&quot; в ответе. Перечисляются через запятую. Если параметр не указан, возвращаются только основные данные персоны. (optional)
     * @return ApiResponse&lt;PersonInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PersonInfo> personsIdGetWithHttpInfo(String id, OffsetDateTime actualOn, String expand)
            throws ApiException {
        com.squareup.okhttp.Call call = personsIdGetValidateBeforeCall(id, actualOn, expand, null, null);
        Type localVarReturnType = new TypeToken<PersonInfo>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Получить персону по идентификатору (asynchronously)
     *
     * @param id       Идентификатор персоны&lt;/br&gt; (пример \&quot;449ab5bd-4f09-47a0-ba89-70ae2cd49692\&quot;) (required)
     * @param actualOn Дата актуальности (optional)
     * @param expand   Список полей, которые должны быть \&quot;раскрыты\&quot; в ответе. Перечисляются через запятую. Если параметр не указан, возвращаются только основные данные персоны. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsIdGetAsync(String id, OffsetDateTime actualOn, String expand,
            final ApiCallback<PersonInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsIdGetValidateBeforeCall(id, actualOn, expand, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<PersonInfo>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for personsIdPut
     *
     * @param id                      Идентификатор версии персоны (required)
     * @param body                    (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsIdPutCall(String id, PersonInfo body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/persons/{id}".replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                        throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"ApiKeyAuth"};
        return apiClient
                .buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                        localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsIdPutValidateBeforeCall(String id, PersonInfo body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling personsIdPut(Async)");
        }

        com.squareup.okhttp.Call call = personsIdPutCall(id, body, progressListener, progressRequestListener);
        return call;


    }

    /**
     * Изменение основных данных персоны
     *
     * @param id   Идентификатор версии персоны (required)
     * @param body (optional)
     * @return PersonInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PersonInfo personsIdPut(String id, PersonInfo body) throws ApiException {
        ApiResponse<PersonInfo> resp = personsIdPutWithHttpInfo(id, body);
        return resp.getData();
    }

    /**
     * Изменение основных данных персоны
     *
     * @param id   Идентификатор версии персоны (required)
     * @param body (optional)
     * @return ApiResponse&lt;PersonInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PersonInfo> personsIdPutWithHttpInfo(String id, PersonInfo body) throws ApiException {
        com.squareup.okhttp.Call call = personsIdPutValidateBeforeCall(id, body, null, null);
        Type localVarReturnType = new TypeToken<PersonInfo>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Изменение основных данных персоны (asynchronously)
     *
     * @param id       Идентификатор версии персоны (required)
     * @param body     (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsIdPutAsync(String id, PersonInfo body,
            final ApiCallback<PersonInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsIdPutValidateBeforeCall(id, body, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<PersonInfo>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for personsPersonIdAddressesIdDelete
     *
     * @param personId                Идентификатор персоны&lt;/br&gt; (пример \&quot;449ab5bd-4f09-47a0-ba89-70ae2cd49692\&quot;) (required)
     * @param id                      Идентификатор версии адреса (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdAddressesIdDeleteCall(String personId, String id,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/{person_id}/addresses/{id}"
                .replaceAll("\\{" + "person_id" + "\\}", apiClient.escapeString(personId.toString()))
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                        throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"ApiKeyAuth"};
        return apiClient
                .buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                        localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsPersonIdAddressesIdDeleteValidateBeforeCall(String personId, String id,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException(
                    "Missing the required parameter 'personId' when calling personsPersonIdAddressesIdDelete(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling personsPersonIdAddressesIdDelete(Async)");
        }

        com.squareup.okhttp.Call call = personsPersonIdAddressesIdDeleteCall(personId, id, progressListener,
                progressRequestListener);
        return call;


    }

    /**
     * Удаление адреса персоны
     *
     * @param personId Идентификатор персоны&lt;/br&gt; (пример \&quot;449ab5bd-4f09-47a0-ba89-70ae2cd49692\&quot;) (required)
     * @param id       Идентификатор версии адреса (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void personsPersonIdAddressesIdDelete(String personId, String id) throws ApiException {
        personsPersonIdAddressesIdDeleteWithHttpInfo(personId, id);
    }

    /**
     * Удаление адреса персоны
     *
     * @param personId Идентификатор персоны&lt;/br&gt; (пример \&quot;449ab5bd-4f09-47a0-ba89-70ae2cd49692\&quot;) (required)
     * @param id       Идентификатор версии адреса (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> personsPersonIdAddressesIdDeleteWithHttpInfo(String personId, String id)
            throws ApiException {
        com.squareup.okhttp.Call call = personsPersonIdAddressesIdDeleteValidateBeforeCall(personId, id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Удаление адреса персоны (asynchronously)
     *
     * @param personId Идентификатор персоны&lt;/br&gt; (пример \&quot;449ab5bd-4f09-47a0-ba89-70ae2cd49692\&quot;) (required)
     * @param id       Идентификатор версии адреса (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdAddressesIdDeleteAsync(String personId, String id,
            final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsPersonIdAddressesIdDeleteValidateBeforeCall(personId, id,
                progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for personsPersonIdAddressesIdPut
     *
     * @param personId                Идентификатор персоны&lt;/br&gt; (пример \&quot;449ab5bd-4f09-47a0-ba89-70ae2cd49692\&quot;) (required)
     * @param id                      Идентификатор версии адреса (required)
     * @param body                    (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdAddressesIdPutCall(String personId, String id, PersonAddress body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/persons/{person_id}/addresses/{id}"
                .replaceAll("\\{" + "person_id" + "\\}", apiClient.escapeString(personId.toString()))
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                        throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"ApiKeyAuth"};
        return apiClient
                .buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                        localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsPersonIdAddressesIdPutValidateBeforeCall(String personId, String id,
            PersonAddress body, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException(
                    "Missing the required parameter 'personId' when calling personsPersonIdAddressesIdPut(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling personsPersonIdAddressesIdPut(Async)");
        }

        com.squareup.okhttp.Call call = personsPersonIdAddressesIdPutCall(personId, id, body, progressListener,
                progressRequestListener);
        return call;


    }

    /**
     * Изменение адреса персоны
     *
     * @param personId Идентификатор персоны&lt;/br&gt; (пример \&quot;449ab5bd-4f09-47a0-ba89-70ae2cd49692\&quot;) (required)
     * @param id       Идентификатор версии адреса (required)
     * @param body     (optional)
     * @return PersonAddress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PersonAddress personsPersonIdAddressesIdPut(String personId, String id, PersonAddress body)
            throws ApiException {
        ApiResponse<PersonAddress> resp = personsPersonIdAddressesIdPutWithHttpInfo(personId, id, body);
        return resp.getData();
    }

    /**
     * Изменение адреса персоны
     *
     * @param personId Идентификатор персоны&lt;/br&gt; (пример \&quot;449ab5bd-4f09-47a0-ba89-70ae2cd49692\&quot;) (required)
     * @param id       Идентификатор версии адреса (required)
     * @param body     (optional)
     * @return ApiResponse&lt;PersonAddress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PersonAddress> personsPersonIdAddressesIdPutWithHttpInfo(String personId, String id,
            PersonAddress body) throws ApiException {
        com.squareup.okhttp.Call call = personsPersonIdAddressesIdPutValidateBeforeCall(personId, id, body, null, null);
        Type localVarReturnType = new TypeToken<PersonAddress>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Изменение адреса персоны (asynchronously)
     *
     * @param personId Идентификатор персоны&lt;/br&gt; (пример \&quot;449ab5bd-4f09-47a0-ba89-70ae2cd49692\&quot;) (required)
     * @param id       Идентификатор версии адреса (required)
     * @param body     (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdAddressesIdPutAsync(String personId, String id, PersonAddress body,
            final ApiCallback<PersonAddress> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsPersonIdAddressesIdPutValidateBeforeCall(personId, id, body,
                progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PersonAddress>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for personsPersonIdAddressesPost
     *
     * @param personId                Идентификатор персоны&lt;/br&gt; (пример \&quot;449ab5bd-4f09-47a0-ba89-70ae2cd49692\&quot;) (required)
     * @param body                    (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdAddressesPostCall(String personId, PersonAddress body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/persons/{person_id}/addresses"
                .replaceAll("\\{" + "person_id" + "\\}", apiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                        throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"ApiKeyAuth"};
        return apiClient
                .buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                        localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsPersonIdAddressesPostValidateBeforeCall(String personId, PersonAddress body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException(
                    "Missing the required parameter 'personId' when calling personsPersonIdAddressesPost(Async)");
        }

        com.squareup.okhttp.Call call = personsPersonIdAddressesPostCall(personId, body, progressListener,
                progressRequestListener);
        return call;


    }

    /**
     * Создание нового адреса персоны
     *
     * @param personId Идентификатор персоны&lt;/br&gt; (пример \&quot;449ab5bd-4f09-47a0-ba89-70ae2cd49692\&quot;) (required)
     * @param body     (optional)
     * @return PersonAddress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PersonAddress personsPersonIdAddressesPost(String personId, PersonAddress body) throws ApiException {
        ApiResponse<PersonAddress> resp = personsPersonIdAddressesPostWithHttpInfo(personId, body);
        return resp.getData();
    }

    /**
     * Создание нового адреса персоны
     *
     * @param personId Идентификатор персоны&lt;/br&gt; (пример \&quot;449ab5bd-4f09-47a0-ba89-70ae2cd49692\&quot;) (required)
     * @param body     (optional)
     * @return ApiResponse&lt;PersonAddress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PersonAddress> personsPersonIdAddressesPostWithHttpInfo(String personId, PersonAddress body)
            throws ApiException {
        com.squareup.okhttp.Call call = personsPersonIdAddressesPostValidateBeforeCall(personId, body, null, null);
        Type localVarReturnType = new TypeToken<PersonAddress>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Создание нового адреса персоны (asynchronously)
     *
     * @param personId Идентификатор персоны&lt;/br&gt; (пример \&quot;449ab5bd-4f09-47a0-ba89-70ae2cd49692\&quot;) (required)
     * @param body     (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdAddressesPostAsync(String personId, PersonAddress body,
            final ApiCallback<PersonAddress> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsPersonIdAddressesPostValidateBeforeCall(personId, body, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<PersonAddress>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for personsPersonIdAgentsIdDelete
     *
     * @param personId                Идентификатор персоны (required)
     * @param id                      Идентификатор представителя (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdAgentsIdDeleteCall(String personId, String id,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/{person_id}/agents/{id}"
                .replaceAll("\\{" + "person_id" + "\\}", apiClient.escapeString(personId.toString()))
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                        throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"ApiKeyAuth"};
        return apiClient
                .buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                        localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsPersonIdAgentsIdDeleteValidateBeforeCall(String personId, String id,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException(
                    "Missing the required parameter 'personId' when calling personsPersonIdAgentsIdDelete(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling personsPersonIdAgentsIdDelete(Async)");
        }

        com.squareup.okhttp.Call call = personsPersonIdAgentsIdDeleteCall(personId, id, progressListener,
                progressRequestListener);
        return call;


    }

    /**
     * Удаление представителя персоны
     *
     * @param personId Идентификатор персоны (required)
     * @param id       Идентификатор представителя (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void personsPersonIdAgentsIdDelete(String personId, String id) throws ApiException {
        personsPersonIdAgentsIdDeleteWithHttpInfo(personId, id);
    }

    /**
     * Удаление представителя персоны
     *
     * @param personId Идентификатор персоны (required)
     * @param id       Идентификатор представителя (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> personsPersonIdAgentsIdDeleteWithHttpInfo(String personId, String id) throws ApiException {
        com.squareup.okhttp.Call call = personsPersonIdAgentsIdDeleteValidateBeforeCall(personId, id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Удаление представителя персоны (asynchronously)
     *
     * @param personId Идентификатор персоны (required)
     * @param id       Идентификатор представителя (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdAgentsIdDeleteAsync(String personId, String id,
            final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsPersonIdAgentsIdDeleteValidateBeforeCall(personId, id, progressListener,
                progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for personsPersonIdAgentsIdPut
     *
     * @param personId                Идентификатор персоны (required)
     * @param id                      Идентификатор связи с представителем (required)
     * @param body                    (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdAgentsIdPutCall(String personId, String id, PersonAgent body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/persons/{person_id}/agents/{id}"
                .replaceAll("\\{" + "person_id" + "\\}", apiClient.escapeString(personId.toString()))
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                        throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"ApiKeyAuth"};
        return apiClient
                .buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                        localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsPersonIdAgentsIdPutValidateBeforeCall(String personId, String id,
            PersonAgent body, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException(
                    "Missing the required parameter 'personId' when calling personsPersonIdAgentsIdPut(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling personsPersonIdAgentsIdPut(Async)");
        }

        com.squareup.okhttp.Call call = personsPersonIdAgentsIdPutCall(personId, id, body, progressListener,
                progressRequestListener);
        return call;


    }

    /**
     * Изменение связи персоны и представителя
     *
     * @param personId Идентификатор персоны (required)
     * @param id       Идентификатор связи с представителем (required)
     * @param body     (optional)
     * @return PersonAgent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PersonAgent personsPersonIdAgentsIdPut(String personId, String id, PersonAgent body) throws ApiException {
        ApiResponse<PersonAgent> resp = personsPersonIdAgentsIdPutWithHttpInfo(personId, id, body);
        return resp.getData();
    }

    /**
     * Изменение связи персоны и представителя
     *
     * @param personId Идентификатор персоны (required)
     * @param id       Идентификатор связи с представителем (required)
     * @param body     (optional)
     * @return ApiResponse&lt;PersonAgent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PersonAgent> personsPersonIdAgentsIdPutWithHttpInfo(String personId, String id, PersonAgent body)
            throws ApiException {
        com.squareup.okhttp.Call call = personsPersonIdAgentsIdPutValidateBeforeCall(personId, id, body, null, null);
        Type localVarReturnType = new TypeToken<PersonAgent>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Изменение связи персоны и представителя (asynchronously)
     *
     * @param personId Идентификатор персоны (required)
     * @param id       Идентификатор связи с представителем (required)
     * @param body     (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdAgentsIdPutAsync(String personId, String id, PersonAgent body,
            final ApiCallback<PersonAgent> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsPersonIdAgentsIdPutValidateBeforeCall(personId, id, body,
                progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PersonAgent>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for personsPersonIdAgentsPost
     *
     * @param personId                Идентификатор персоны (required)
     * @param body                    (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdAgentsPostCall(String personId, PersonAgent body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/persons/{person_id}/agents"
                .replaceAll("\\{" + "person_id" + "\\}", apiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                        throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"ApiKeyAuth"};
        return apiClient
                .buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                        localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsPersonIdAgentsPostValidateBeforeCall(String personId, PersonAgent body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException(
                    "Missing the required parameter 'personId' when calling personsPersonIdAgentsPost(Async)");
        }

        com.squareup.okhttp.Call call = personsPersonIdAgentsPostCall(personId, body, progressListener,
                progressRequestListener);
        return call;


    }

    /**
     * Создание нового представителя персоны или добавление существующей персоны в качестве представителя. Если добавяется существующая персона, agent_person не указывается, вместо нее должен присутствовать атрибут agent_person_id с идентификатором персоны представителя
     *
     * @param personId Идентификатор персоны (required)
     * @param body     (optional)
     * @return PersonAgent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PersonAgent personsPersonIdAgentsPost(String personId, PersonAgent body) throws ApiException {
        ApiResponse<PersonAgent> resp = personsPersonIdAgentsPostWithHttpInfo(personId, body);
        return resp.getData();
    }

    /**
     * Создание нового представителя персоны или добавление существующей персоны в качестве представителя. Если добавяется существующая персона, agent_person не указывается, вместо нее должен присутствовать атрибут agent_person_id с идентификатором персоны представителя
     *
     * @param personId Идентификатор персоны (required)
     * @param body     (optional)
     * @return ApiResponse&lt;PersonAgent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PersonAgent> personsPersonIdAgentsPostWithHttpInfo(String personId, PersonAgent body)
            throws ApiException {
        com.squareup.okhttp.Call call = personsPersonIdAgentsPostValidateBeforeCall(personId, body, null, null);
        Type localVarReturnType = new TypeToken<PersonAgent>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously)
     * Создание нового представителя персоны или добавление существующей персоны в качестве представителя. Если добавяется существующая персона, agent_person не указывается, вместо нее должен присутствовать атрибут agent_person_id с идентификатором персоны представителя
     *
     * @param personId Идентификатор персоны (required)
     * @param body     (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdAgentsPostAsync(String personId, PersonAgent body,
            final ApiCallback<PersonAgent> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsPersonIdAgentsPostValidateBeforeCall(personId, body, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<PersonAgent>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for personsPersonIdCategoryIdDelete
     *
     * @param personId                Идентификатор персоны (required)
     * @param id                      Идентификатор связи (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdCategoryIdDeleteCall(String personId, String id,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/{person_id}/category/{id}"
                .replaceAll("\\{" + "person_id" + "\\}", apiClient.escapeString(personId.toString()))
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                        throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"ApiKeyAuth"};
        return apiClient
                .buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                        localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsPersonIdCategoryIdDeleteValidateBeforeCall(String personId, String id,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException(
                    "Missing the required parameter 'personId' when calling personsPersonIdCategoryIdDelete(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling personsPersonIdCategoryIdDelete(Async)");
        }

        com.squareup.okhttp.Call call = personsPersonIdCategoryIdDeleteCall(personId, id, progressListener,
                progressRequestListener);
        return call;


    }

    /**
     * Удаление данных о категории персоны
     *
     * @param personId Идентификатор персоны (required)
     * @param id       Идентификатор связи (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void personsPersonIdCategoryIdDelete(String personId, String id) throws ApiException {
        personsPersonIdCategoryIdDeleteWithHttpInfo(personId, id);
    }

    /**
     * Удаление данных о категории персоны
     *
     * @param personId Идентификатор персоны (required)
     * @param id       Идентификатор связи (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> personsPersonIdCategoryIdDeleteWithHttpInfo(String personId, String id)
            throws ApiException {
        com.squareup.okhttp.Call call = personsPersonIdCategoryIdDeleteValidateBeforeCall(personId, id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Удаление данных о категории персоны (asynchronously)
     *
     * @param personId Идентификатор персоны (required)
     * @param id       Идентификатор связи (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdCategoryIdDeleteAsync(String personId, String id,
            final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsPersonIdCategoryIdDeleteValidateBeforeCall(personId, id,
                progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for personsPersonIdCategoryIdPut
     *
     * @param personId                Идентификатор персоны (required)
     * @param id                      Идентификатор связи (required)
     * @param body                    (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdCategoryIdPutCall(String personId, String id, PersonCategory body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/persons/{person_id}/category/{id}"
                .replaceAll("\\{" + "person_id" + "\\}", apiClient.escapeString(personId.toString()))
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                        throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"ApiKeyAuth"};
        return apiClient
                .buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                        localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsPersonIdCategoryIdPutValidateBeforeCall(String personId, String id,
            PersonCategory body, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException(
                    "Missing the required parameter 'personId' when calling personsPersonIdCategoryIdPut(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling personsPersonIdCategoryIdPut(Async)");
        }

        com.squareup.okhttp.Call call = personsPersonIdCategoryIdPutCall(personId, id, body, progressListener,
                progressRequestListener);
        return call;


    }

    /**
     * Изменение данных о категории
     *
     * @param personId Идентификатор персоны (required)
     * @param id       Идентификатор связи (required)
     * @param body     (optional)
     * @return PersonCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PersonCategory personsPersonIdCategoryIdPut(String personId, String id, PersonCategory body)
            throws ApiException {
        ApiResponse<PersonCategory> resp = personsPersonIdCategoryIdPutWithHttpInfo(personId, id, body);
        return resp.getData();
    }

    /**
     * Изменение данных о категории
     *
     * @param personId Идентификатор персоны (required)
     * @param id       Идентификатор связи (required)
     * @param body     (optional)
     * @return ApiResponse&lt;PersonCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PersonCategory> personsPersonIdCategoryIdPutWithHttpInfo(String personId, String id,
            PersonCategory body) throws ApiException {
        com.squareup.okhttp.Call call = personsPersonIdCategoryIdPutValidateBeforeCall(personId, id, body, null, null);
        Type localVarReturnType = new TypeToken<PersonCategory>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Изменение данных о категории (asynchronously)
     *
     * @param personId Идентификатор персоны (required)
     * @param id       Идентификатор связи (required)
     * @param body     (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdCategoryIdPutAsync(String personId, String id, PersonCategory body,
            final ApiCallback<PersonCategory> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsPersonIdCategoryIdPutValidateBeforeCall(personId, id, body,
                progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PersonCategory>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for personsPersonIdCategoryPost
     *
     * @param personId                Идентификатор персоны (required)
     * @param body                    (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdCategoryPostCall(String personId, PersonCategory body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/persons/{person_id}/category"
                .replaceAll("\\{" + "person_id" + "\\}", apiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                        throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"ApiKeyAuth"};
        return apiClient
                .buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                        localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsPersonIdCategoryPostValidateBeforeCall(String personId, PersonCategory body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException(
                    "Missing the required parameter 'personId' when calling personsPersonIdCategoryPost(Async)");
        }

        com.squareup.okhttp.Call call = personsPersonIdCategoryPostCall(personId, body, progressListener,
                progressRequestListener);
        return call;


    }

    /**
     * Добавление новых данных о категории
     *
     * @param personId Идентификатор персоны (required)
     * @param body     (optional)
     * @return PersonCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PersonCategory personsPersonIdCategoryPost(String personId, PersonCategory body) throws ApiException {
        ApiResponse<PersonCategory> resp = personsPersonIdCategoryPostWithHttpInfo(personId, body);
        return resp.getData();
    }

    /**
     * Добавление новых данных о категории
     *
     * @param personId Идентификатор персоны (required)
     * @param body     (optional)
     * @return ApiResponse&lt;PersonCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PersonCategory> personsPersonIdCategoryPostWithHttpInfo(String personId, PersonCategory body)
            throws ApiException {
        com.squareup.okhttp.Call call = personsPersonIdCategoryPostValidateBeforeCall(personId, body, null, null);
        Type localVarReturnType = new TypeToken<PersonCategory>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Добавление новых данных о категории (asynchronously)
     *
     * @param personId Идентификатор персоны (required)
     * @param body     (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdCategoryPostAsync(String personId, PersonCategory body,
            final ApiCallback<PersonCategory> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsPersonIdCategoryPostValidateBeforeCall(personId, body, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<PersonCategory>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for personsPersonIdContactsIdDelete
     *
     * @param personId                Идентификатор персоны (required)
     * @param id                      Идентификатор версии контакта (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdContactsIdDeleteCall(String personId, String id,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/{person_id}/contacts/{id}"
                .replaceAll("\\{" + "person_id" + "\\}", apiClient.escapeString(personId.toString()))
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                        throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"ApiKeyAuth"};
        return apiClient
                .buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                        localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsPersonIdContactsIdDeleteValidateBeforeCall(String personId, String id,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException(
                    "Missing the required parameter 'personId' when calling personsPersonIdContactsIdDelete(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling personsPersonIdContactsIdDelete(Async)");
        }

        com.squareup.okhttp.Call call = personsPersonIdContactsIdDeleteCall(personId, id, progressListener,
                progressRequestListener);
        return call;


    }

    /**
     * Удаление контакта персоны
     *
     * @param personId Идентификатор персоны (required)
     * @param id       Идентификатор версии контакта (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void personsPersonIdContactsIdDelete(String personId, String id) throws ApiException {
        personsPersonIdContactsIdDeleteWithHttpInfo(personId, id);
    }

    /**
     * Удаление контакта персоны
     *
     * @param personId Идентификатор персоны (required)
     * @param id       Идентификатор версии контакта (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> personsPersonIdContactsIdDeleteWithHttpInfo(String personId, String id)
            throws ApiException {
        com.squareup.okhttp.Call call = personsPersonIdContactsIdDeleteValidateBeforeCall(personId, id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Удаление контакта персоны (asynchronously)
     *
     * @param personId Идентификатор персоны (required)
     * @param id       Идентификатор версии контакта (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdContactsIdDeleteAsync(String personId, String id,
            final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsPersonIdContactsIdDeleteValidateBeforeCall(personId, id,
                progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for personsPersonIdContactsIdPut
     *
     * @param personId                Идентификатор персоны (required)
     * @param id                      Идентификатор контакта (required)
     * @param body                    (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdContactsIdPutCall(String personId, String id, PersonContact body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/persons/{person_id}/contacts/{id}"
                .replaceAll("\\{" + "person_id" + "\\}", apiClient.escapeString(personId.toString()))
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                        throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"ApiKeyAuth"};
        return apiClient
                .buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                        localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsPersonIdContactsIdPutValidateBeforeCall(String personId, String id,
            PersonContact body, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException(
                    "Missing the required parameter 'personId' when calling personsPersonIdContactsIdPut(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling personsPersonIdContactsIdPut(Async)");
        }

        com.squareup.okhttp.Call call = personsPersonIdContactsIdPutCall(personId, id, body, progressListener,
                progressRequestListener);
        return call;


    }

    /**
     * Изменение контакта персоны
     *
     * @param personId Идентификатор персоны (required)
     * @param id       Идентификатор контакта (required)
     * @param body     (optional)
     * @return PersonContact
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PersonContact personsPersonIdContactsIdPut(String personId, String id, PersonContact body)
            throws ApiException {
        ApiResponse<PersonContact> resp = personsPersonIdContactsIdPutWithHttpInfo(personId, id, body);
        return resp.getData();
    }

    /**
     * Изменение контакта персоны
     *
     * @param personId Идентификатор персоны (required)
     * @param id       Идентификатор контакта (required)
     * @param body     (optional)
     * @return ApiResponse&lt;PersonContact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PersonContact> personsPersonIdContactsIdPutWithHttpInfo(String personId, String id,
            PersonContact body) throws ApiException {
        com.squareup.okhttp.Call call = personsPersonIdContactsIdPutValidateBeforeCall(personId, id, body, null, null);
        Type localVarReturnType = new TypeToken<PersonContact>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Изменение контакта персоны (asynchronously)
     *
     * @param personId Идентификатор персоны (required)
     * @param id       Идентификатор контакта (required)
     * @param body     (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdContactsIdPutAsync(String personId, String id, PersonContact body,
            final ApiCallback<PersonContact> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsPersonIdContactsIdPutValidateBeforeCall(personId, id, body,
                progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PersonContact>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for personsPersonIdContactsPost
     *
     * @param personId                Идентификатор персоны (required)
     * @param body                    (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdContactsPostCall(String personId, PersonContact body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/persons/{person_id}/contacts"
                .replaceAll("\\{" + "person_id" + "\\}", apiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                        throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"ApiKeyAuth"};
        return apiClient
                .buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                        localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsPersonIdContactsPostValidateBeforeCall(String personId, PersonContact body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException(
                    "Missing the required parameter 'personId' when calling personsPersonIdContactsPost(Async)");
        }

        com.squareup.okhttp.Call call = personsPersonIdContactsPostCall(personId, body, progressListener,
                progressRequestListener);
        return call;


    }

    /**
     * Создание нового контакта персоны
     *
     * @param personId Идентификатор персоны (required)
     * @param body     (optional)
     * @return PersonContact
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PersonContact personsPersonIdContactsPost(String personId, PersonContact body) throws ApiException {
        ApiResponse<PersonContact> resp = personsPersonIdContactsPostWithHttpInfo(personId, body);
        return resp.getData();
    }

    /**
     * Создание нового контакта персоны
     *
     * @param personId Идентификатор персоны (required)
     * @param body     (optional)
     * @return ApiResponse&lt;PersonContact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PersonContact> personsPersonIdContactsPostWithHttpInfo(String personId, PersonContact body)
            throws ApiException {
        com.squareup.okhttp.Call call = personsPersonIdContactsPostValidateBeforeCall(personId, body, null, null);
        Type localVarReturnType = new TypeToken<PersonContact>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Создание нового контакта персоны (asynchronously)
     *
     * @param personId Идентификатор персоны (required)
     * @param body     (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdContactsPostAsync(String personId, PersonContact body,
            final ApiCallback<PersonContact> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsPersonIdContactsPostValidateBeforeCall(personId, body, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<PersonContact>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for personsPersonIdDocumentsIdDelete
     *
     * @param personId                Идентификатор персоны (required)
     * @param id                      Идентификатор документа (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdDocumentsIdDeleteCall(String personId, String id,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/{person_id}/documents/{id}"
                .replaceAll("\\{" + "person_id" + "\\}", apiClient.escapeString(personId.toString()))
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                        throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"ApiKeyAuth"};
        return apiClient
                .buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                        localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsPersonIdDocumentsIdDeleteValidateBeforeCall(String personId, String id,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException(
                    "Missing the required parameter 'personId' when calling personsPersonIdDocumentsIdDelete(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling personsPersonIdDocumentsIdDelete(Async)");
        }

        com.squareup.okhttp.Call call = personsPersonIdDocumentsIdDeleteCall(personId, id, progressListener,
                progressRequestListener);
        return call;


    }

    /**
     * Удаление документа персоны
     *
     * @param personId Идентификатор персоны (required)
     * @param id       Идентификатор документа (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void personsPersonIdDocumentsIdDelete(String personId, String id) throws ApiException {
        personsPersonIdDocumentsIdDeleteWithHttpInfo(personId, id);
    }

    /**
     * Удаление документа персоны
     *
     * @param personId Идентификатор персоны (required)
     * @param id       Идентификатор документа (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> personsPersonIdDocumentsIdDeleteWithHttpInfo(String personId, String id)
            throws ApiException {
        com.squareup.okhttp.Call call = personsPersonIdDocumentsIdDeleteValidateBeforeCall(personId, id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Удаление документа персоны (asynchronously)
     *
     * @param personId Идентификатор персоны (required)
     * @param id       Идентификатор документа (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdDocumentsIdDeleteAsync(String personId, String id,
            final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsPersonIdDocumentsIdDeleteValidateBeforeCall(personId, id,
                progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for personsPersonIdDocumentsIdPut
     *
     * @param personId                Идентификатор персоны (required)
     * @param id                      Идентификатор документа (required)
     * @param body                    (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdDocumentsIdPutCall(String personId, String id, PersonDocument body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/persons/{person_id}/documents/{id}"
                .replaceAll("\\{" + "person_id" + "\\}", apiClient.escapeString(personId.toString()))
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                        throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"ApiKeyAuth"};
        return apiClient
                .buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                        localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsPersonIdDocumentsIdPutValidateBeforeCall(String personId, String id,
            PersonDocument body, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException(
                    "Missing the required parameter 'personId' when calling personsPersonIdDocumentsIdPut(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling personsPersonIdDocumentsIdPut(Async)");
        }

        com.squareup.okhttp.Call call = personsPersonIdDocumentsIdPutCall(personId, id, body, progressListener,
                progressRequestListener);
        return call;


    }

    /**
     * Изменение документа персоны
     * 1. Находится документ с указанным идентификатором. 2. Проверяется что документ принадлежит персоне с указанным идентификатором 3. Находится запись person_document для указанного документа 4. Поле actual_to присваивается значение системного времени приема запроса 5. Создается новая запись в таблице person_document, где поле actual_from равна системной дате приема запроса. actual_to - в будущем 6. возвращается объект Документ
     *
     * @param personId Идентификатор персоны (required)
     * @param id       Идентификатор документа (required)
     * @param body     (optional)
     * @return PersonDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PersonDocument personsPersonIdDocumentsIdPut(String personId, String id, PersonDocument body)
            throws ApiException {
        ApiResponse<PersonDocument> resp = personsPersonIdDocumentsIdPutWithHttpInfo(personId, id, body);
        return resp.getData();
    }

    /**
     * Изменение документа персоны
     * 1. Находится документ с указанным идентификатором. 2. Проверяется что документ принадлежит персоне с указанным идентификатором 3. Находится запись person_document для указанного документа 4. Поле actual_to присваивается значение системного времени приема запроса 5. Создается новая запись в таблице person_document, где поле actual_from равна системной дате приема запроса. actual_to - в будущем 6. возвращается объект Документ
     *
     * @param personId Идентификатор персоны (required)
     * @param id       Идентификатор документа (required)
     * @param body     (optional)
     * @return ApiResponse&lt;PersonDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PersonDocument> personsPersonIdDocumentsIdPutWithHttpInfo(String personId, String id,
            PersonDocument body) throws ApiException {
        com.squareup.okhttp.Call call = personsPersonIdDocumentsIdPutValidateBeforeCall(personId, id, body, null, null);
        Type localVarReturnType = new TypeToken<PersonDocument>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Изменение документа персоны (asynchronously)
     * 1. Находится документ с указанным идентификатором. 2. Проверяется что документ принадлежит персоне с указанным идентификатором 3. Находится запись person_document для указанного документа 4. Поле actual_to присваивается значение системного времени приема запроса 5. Создается новая запись в таблице person_document, где поле actual_from равна системной дате приема запроса. actual_to - в будущем 6. возвращается объект Документ
     *
     * @param personId Идентификатор персоны (required)
     * @param id       Идентификатор документа (required)
     * @param body     (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdDocumentsIdPutAsync(String personId, String id, PersonDocument body,
            final ApiCallback<PersonDocument> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsPersonIdDocumentsIdPutValidateBeforeCall(personId, id, body,
                progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PersonDocument>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for personsPersonIdDocumentsPost
     *
     * @param personId                Идентификатор персоны (required)
     * @param body                    (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdDocumentsPostCall(String personId, PersonDocument body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/persons/{person_id}/documents"
                .replaceAll("\\{" + "person_id" + "\\}", apiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                        throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"ApiKeyAuth"};
        return apiClient
                .buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                        localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsPersonIdDocumentsPostValidateBeforeCall(String personId,
            PersonDocument body, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException(
                    "Missing the required parameter 'personId' when calling personsPersonIdDocumentsPost(Async)");
        }

        com.squareup.okhttp.Call call = personsPersonIdDocumentsPostCall(personId, body, progressListener,
                progressRequestListener);
        return call;


    }

    /**
     * Создание нового документа персоны
     * 1. ищется персона с указанным id.&lt;br/&gt;2. Создается документ с указанными параметрами.&lt;br/&gt; 3. заполняется таблица person_document.&lt;br/&gt; 4. В результате возвращается созданная структура описания документа&lt;br/&gt;
     *
     * @param personId Идентификатор персоны (required)
     * @param body     (optional)
     * @return PersonDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PersonDocument personsPersonIdDocumentsPost(String personId, PersonDocument body) throws ApiException {
        ApiResponse<PersonDocument> resp = personsPersonIdDocumentsPostWithHttpInfo(personId, body);
        return resp.getData();
    }

    /**
     * Создание нового документа персоны
     * 1. ищется персона с указанным id.&lt;br/&gt;2. Создается документ с указанными параметрами.&lt;br/&gt; 3. заполняется таблица person_document.&lt;br/&gt; 4. В результате возвращается созданная структура описания документа&lt;br/&gt;
     *
     * @param personId Идентификатор персоны (required)
     * @param body     (optional)
     * @return ApiResponse&lt;PersonDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PersonDocument> personsPersonIdDocumentsPostWithHttpInfo(String personId, PersonDocument body)
            throws ApiException {
        com.squareup.okhttp.Call call = personsPersonIdDocumentsPostValidateBeforeCall(personId, body, null, null);
        Type localVarReturnType = new TypeToken<PersonDocument>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Создание нового документа персоны (asynchronously)
     * 1. ищется персона с указанным id.&lt;br/&gt;2. Создается документ с указанными параметрами.&lt;br/&gt; 3. заполняется таблица person_document.&lt;br/&gt; 4. В результате возвращается созданная структура описания документа&lt;br/&gt;
     *
     * @param personId Идентификатор персоны (required)
     * @param body     (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdDocumentsPostAsync(String personId, PersonDocument body,
            final ApiCallback<PersonDocument> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsPersonIdDocumentsPostValidateBeforeCall(personId, body, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<PersonDocument>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for personsPersonIdEducationIdDelete
     *
     * @param personId                Идентификатор персоны (required)
     * @param id                      Идентификатор связи (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdEducationIdDeleteCall(String personId, String id,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/{person_id}/education/{id}"
                .replaceAll("\\{" + "person_id" + "\\}", apiClient.escapeString(personId.toString()))
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                        throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"ApiKeyAuth"};
        return apiClient
                .buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                        localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsPersonIdEducationIdDeleteValidateBeforeCall(String personId, String id,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException(
                    "Missing the required parameter 'personId' when calling personsPersonIdEducationIdDelete(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling personsPersonIdEducationIdDelete(Async)");
        }

        com.squareup.okhttp.Call call = personsPersonIdEducationIdDeleteCall(personId, id, progressListener,
                progressRequestListener);
        return call;


    }

    /**
     * Удаление данных об обучении персоны. Метод должен использоваться только в случае добавления ошибочной записи об обучении. В случае отчисления необходимо использовать метод PUT.
     *
     * @param personId Идентификатор персоны (required)
     * @param id       Идентификатор связи (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void personsPersonIdEducationIdDelete(String personId, String id) throws ApiException {
        personsPersonIdEducationIdDeleteWithHttpInfo(personId, id);
    }

    /**
     * Удаление данных об обучении персоны. Метод должен использоваться только в случае добавления ошибочной записи об обучении. В случае отчисления необходимо использовать метод PUT.
     *
     * @param personId Идентификатор персоны (required)
     * @param id       Идентификатор связи (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> personsPersonIdEducationIdDeleteWithHttpInfo(String personId, String id)
            throws ApiException {
        com.squareup.okhttp.Call call = personsPersonIdEducationIdDeleteValidateBeforeCall(personId, id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Удаление данных об обучении персоны. Метод должен использоваться только в случае добавления ошибочной записи об обучении. В случае отчисления необходимо использовать метод PUT. (asynchronously)
     *
     * @param personId Идентификатор персоны (required)
     * @param id       Идентификатор связи (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdEducationIdDeleteAsync(String personId, String id,
            final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsPersonIdEducationIdDeleteValidateBeforeCall(personId, id,
                progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for personsPersonIdEducationIdPut
     *
     * @param personId                Идентификатор персоны (required)
     * @param id                      Идентификатор связи (required)
     * @param body                    (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdEducationIdPutCall(String personId, String id, PersonEducation body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/persons/{person_id}/education/{id}"
                .replaceAll("\\{" + "person_id" + "\\}", apiClient.escapeString(personId.toString()))
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                        throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"ApiKeyAuth"};
        return apiClient
                .buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                        localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsPersonIdEducationIdPutValidateBeforeCall(String personId, String id,
            PersonEducation body, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException(
                    "Missing the required parameter 'personId' when calling personsPersonIdEducationIdPut(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling personsPersonIdEducationIdPut(Async)");
        }

        com.squareup.okhttp.Call call = personsPersonIdEducationIdPutCall(personId, id, body, progressListener,
                progressRequestListener);
        return call;


    }

    /**
     * Изменение данных об обучении персоны
     *
     * @param personId Идентификатор персоны (required)
     * @param id       Идентификатор связи (required)
     * @param body     (optional)
     * @return PersonEducation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PersonEducation personsPersonIdEducationIdPut(String personId, String id, PersonEducation body)
            throws ApiException {
        ApiResponse<PersonEducation> resp = personsPersonIdEducationIdPutWithHttpInfo(personId, id, body);
        return resp.getData();
    }

    /**
     * Изменение данных об обучении персоны
     *
     * @param personId Идентификатор персоны (required)
     * @param id       Идентификатор связи (required)
     * @param body     (optional)
     * @return ApiResponse&lt;PersonEducation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PersonEducation> personsPersonIdEducationIdPutWithHttpInfo(String personId, String id,
            PersonEducation body) throws ApiException {
        com.squareup.okhttp.Call call = personsPersonIdEducationIdPutValidateBeforeCall(personId, id, body, null, null);
        Type localVarReturnType = new TypeToken<PersonEducation>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Изменение данных об обучении персоны (asynchronously)
     *
     * @param personId Идентификатор персоны (required)
     * @param id       Идентификатор связи (required)
     * @param body     (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdEducationIdPutAsync(String personId, String id, PersonEducation body,
            final ApiCallback<PersonEducation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsPersonIdEducationIdPutValidateBeforeCall(personId, id, body,
                progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PersonEducation>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for personsPersonIdEducationPost
     *
     * @param personId                Идентификатор персоны (required)
     * @param body                    (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdEducationPostCall(String personId, PersonEducation body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/persons/{person_id}/education"
                .replaceAll("\\{" + "person_id" + "\\}", apiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                        throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"ApiKeyAuth"};
        return apiClient
                .buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                        localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsPersonIdEducationPostValidateBeforeCall(String personId,
            PersonEducation body, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException(
                    "Missing the required parameter 'personId' when calling personsPersonIdEducationPost(Async)");
        }

        com.squareup.okhttp.Call call = personsPersonIdEducationPostCall(personId, body, progressListener,
                progressRequestListener);
        return call;


    }

    /**
     * Добавление новых данных об обучении
     *
     * @param personId Идентификатор персоны (required)
     * @param body     (optional)
     * @return PersonEducation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PersonEducation personsPersonIdEducationPost(String personId, PersonEducation body) throws ApiException {
        ApiResponse<PersonEducation> resp = personsPersonIdEducationPostWithHttpInfo(personId, body);
        return resp.getData();
    }

    /**
     * Добавление новых данных об обучении
     *
     * @param personId Идентификатор персоны (required)
     * @param body     (optional)
     * @return ApiResponse&lt;PersonEducation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PersonEducation> personsPersonIdEducationPostWithHttpInfo(String personId, PersonEducation body)
            throws ApiException {
        com.squareup.okhttp.Call call = personsPersonIdEducationPostValidateBeforeCall(personId, body, null, null);
        Type localVarReturnType = new TypeToken<PersonEducation>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Добавление новых данных об обучении (asynchronously)
     *
     * @param personId Идентификатор персоны (required)
     * @param body     (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdEducationPostAsync(String personId, PersonEducation body,
            final ApiCallback<PersonEducation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsPersonIdEducationPostValidateBeforeCall(personId, body, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<PersonEducation>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for personsPersonIdIdsPut
     *
     * @param personId                Идентификатор персоны (required)
     * @param body                    (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdIdsPutCall(String personId, Person body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/persons/{person_id}/ids"
                .replaceAll("\\{" + "person_id" + "\\}", apiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                        throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"ApiKeyAuth"};
        return apiClient
                .buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                        localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsPersonIdIdsPutValidateBeforeCall(String personId, Person body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException(
                    "Missing the required parameter 'personId' when calling personsPersonIdIdsPut(Async)");
        }

        com.squareup.okhttp.Call call = personsPersonIdIdsPutCall(personId, body, progressListener,
                progressRequestListener);
        return call;


    }

    /**
     * Изменение идентификаторов персоны
     *
     * @param personId Идентификатор персоны (required)
     * @param body     (optional)
     * @return Person
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Person personsPersonIdIdsPut(String personId, Person body) throws ApiException {
        ApiResponse<Person> resp = personsPersonIdIdsPutWithHttpInfo(personId, body);
        return resp.getData();
    }

    /**
     * Изменение идентификаторов персоны
     *
     * @param personId Идентификатор персоны (required)
     * @param body     (optional)
     * @return ApiResponse&lt;Person&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Person> personsPersonIdIdsPutWithHttpInfo(String personId, Person body) throws ApiException {
        com.squareup.okhttp.Call call = personsPersonIdIdsPutValidateBeforeCall(personId, body, null, null);
        Type localVarReturnType = new TypeToken<Person>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Изменение идентификаторов персоны (asynchronously)
     *
     * @param personId Идентификатор персоны (required)
     * @param body     (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdIdsPutAsync(String personId, Person body,
            final ApiCallback<Person> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsPersonIdIdsPutValidateBeforeCall(personId, body, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<Person>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for personsPersonIdMergePost
     *
     * @param personId                Идентификатор версии персоны (required)
     * @param body                    (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdMergePostCall(String personId, Body body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/persons/{person_id}/merge"
                .replaceAll("\\{" + "person_id" + "\\}", apiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                        throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"ApiKeyAuth"};
        return apiClient
                .buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                        localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsPersonIdMergePostValidateBeforeCall(String personId, Body body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException(
                    "Missing the required parameter 'personId' when calling personsPersonIdMergePost(Async)");
        }

        com.squareup.okhttp.Call call = personsPersonIdMergePostCall(personId, body, progressListener,
                progressRequestListener);
        return call;


    }

    /**
     * Слияние двух или более персон
     *
     * @param personId Идентификатор версии персоны (required)
     * @param body     (optional)
     * @return PersonInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PersonInfo personsPersonIdMergePost(String personId, Body body) throws ApiException {
        ApiResponse<PersonInfo> resp = personsPersonIdMergePostWithHttpInfo(personId, body);
        return resp.getData();
    }

    /**
     * Слияние двух или более персон
     *
     * @param personId Идентификатор версии персоны (required)
     * @param body     (optional)
     * @return ApiResponse&lt;PersonInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PersonInfo> personsPersonIdMergePostWithHttpInfo(String personId, Body body)
            throws ApiException {
        com.squareup.okhttp.Call call = personsPersonIdMergePostValidateBeforeCall(personId, body, null, null);
        Type localVarReturnType = new TypeToken<PersonInfo>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Слияние двух или более персон (asynchronously)
     *
     * @param personId Идентификатор версии персоны (required)
     * @param body     (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdMergePostAsync(String personId, Body body,
            final ApiCallback<PersonInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsPersonIdMergePostValidateBeforeCall(personId, body, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<PersonInfo>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for personsPersonIdMergesGet
     *
     * @param personId                Идентификатор персоны (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdMergesGetCall(String personId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/{person_id}/merges"
                .replaceAll("\\{" + "person_id" + "\\}", apiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                        throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"ApiKeyAuth"};
        return apiClient
                .buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                        localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsPersonIdMergesGetValidateBeforeCall(String personId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException(
                    "Missing the required parameter 'personId' when calling personsPersonIdMergesGet(Async)");
        }

        com.squareup.okhttp.Call call = personsPersonIdMergesGetCall(personId, progressListener,
                progressRequestListener);
        return call;


    }

    /**
     * Получить даты слияний персоны с другими. При слиянии персона должна была выступать в качестве основной.
     *
     * @param personId Идентификатор персоны (required)
     * @return List&lt;OffsetDateTime&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<OffsetDateTime> personsPersonIdMergesGet(String personId) throws ApiException {
        ApiResponse<List<OffsetDateTime>> resp = personsPersonIdMergesGetWithHttpInfo(personId);
        return resp.getData();
    }

    /**
     * Получить даты слияний персоны с другими. При слиянии персона должна была выступать в качестве основной.
     *
     * @param personId Идентификатор персоны (required)
     * @return ApiResponse&lt;List&lt;OffsetDateTime&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<OffsetDateTime>> personsPersonIdMergesGetWithHttpInfo(String personId) throws ApiException {
        com.squareup.okhttp.Call call = personsPersonIdMergesGetValidateBeforeCall(personId, null, null);
        Type localVarReturnType = new TypeToken<List<OffsetDateTime>>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Получить даты слияний персоны с другими. При слиянии персона должна была выступать в качестве основной. (asynchronously)
     *
     * @param personId Идентификатор персоны (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdMergesGetAsync(String personId,
            final ApiCallback<List<OffsetDateTime>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsPersonIdMergesGetValidateBeforeCall(personId, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<List<OffsetDateTime>>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for personsPersonIdPreventionsIdDelete
     *
     * @param personId                Идентификатор персоны (required)
     * @param id                      Идентификатор связи (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdPreventionsIdDeleteCall(String personId, String id,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/{person_id}/preventions/{id}"
                .replaceAll("\\{" + "person_id" + "\\}", apiClient.escapeString(personId.toString()))
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                        throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"ApiKeyAuth"};
        return apiClient
                .buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                        localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsPersonIdPreventionsIdDeleteValidateBeforeCall(String personId, String id,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException(
                    "Missing the required parameter 'personId' when calling personsPersonIdPreventionsIdDelete(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling personsPersonIdPreventionsIdDelete(Async)");
        }

        com.squareup.okhttp.Call call = personsPersonIdPreventionsIdDeleteCall(personId, id, progressListener,
                progressRequestListener);
        return call;


    }

    /**
     * Удаление информации об учете
     *
     * @param personId Идентификатор персоны (required)
     * @param id       Идентификатор связи (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void personsPersonIdPreventionsIdDelete(String personId, String id) throws ApiException {
        personsPersonIdPreventionsIdDeleteWithHttpInfo(personId, id);
    }

    /**
     * Удаление информации об учете
     *
     * @param personId Идентификатор персоны (required)
     * @param id       Идентификатор связи (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> personsPersonIdPreventionsIdDeleteWithHttpInfo(String personId, String id)
            throws ApiException {
        com.squareup.okhttp.Call call = personsPersonIdPreventionsIdDeleteValidateBeforeCall(personId, id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Удаление информации об учете (asynchronously)
     *
     * @param personId Идентификатор персоны (required)
     * @param id       Идентификатор связи (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdPreventionsIdDeleteAsync(String personId, String id,
            final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsPersonIdPreventionsIdDeleteValidateBeforeCall(personId, id,
                progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for personsPersonIdPreventionsIdPut
     *
     * @param personId                Идентификатор персоны (required)
     * @param id                      Идентификатор связи (required)
     * @param body                    (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdPreventionsIdPutCall(String personId, String id,
            PersonPrevention body, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/persons/{person_id}/preventions/{id}"
                .replaceAll("\\{" + "person_id" + "\\}", apiClient.escapeString(personId.toString()))
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                        throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"ApiKeyAuth"};
        return apiClient
                .buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                        localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsPersonIdPreventionsIdPutValidateBeforeCall(String personId, String id,
            PersonPrevention body, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException(
                    "Missing the required parameter 'personId' when calling personsPersonIdPreventionsIdPut(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling personsPersonIdPreventionsIdPut(Async)");
        }

        com.squareup.okhttp.Call call = personsPersonIdPreventionsIdPutCall(personId, id, body, progressListener,
                progressRequestListener);
        return call;


    }

    /**
     * Изменение данных об учете персоны
     *
     * @param personId Идентификатор персоны (required)
     * @param id       Идентификатор связи (required)
     * @param body     (optional)
     * @return PersonPrevention
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PersonPrevention personsPersonIdPreventionsIdPut(String personId, String id, PersonPrevention body)
            throws ApiException {
        ApiResponse<PersonPrevention> resp = personsPersonIdPreventionsIdPutWithHttpInfo(personId, id, body);
        return resp.getData();
    }

    /**
     * Изменение данных об учете персоны
     *
     * @param personId Идентификатор персоны (required)
     * @param id       Идентификатор связи (required)
     * @param body     (optional)
     * @return ApiResponse&lt;PersonPrevention&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PersonPrevention> personsPersonIdPreventionsIdPutWithHttpInfo(String personId, String id,
            PersonPrevention body) throws ApiException {
        com.squareup.okhttp.Call call = personsPersonIdPreventionsIdPutValidateBeforeCall(personId, id, body, null,
                null);
        Type localVarReturnType = new TypeToken<PersonPrevention>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Изменение данных об учете персоны (asynchronously)
     *
     * @param personId Идентификатор персоны (required)
     * @param id       Идентификатор связи (required)
     * @param body     (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdPreventionsIdPutAsync(String personId, String id,
            PersonPrevention body, final ApiCallback<PersonPrevention> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsPersonIdPreventionsIdPutValidateBeforeCall(personId, id, body,
                progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PersonPrevention>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for personsPersonIdPreventionsPost
     *
     * @param personId                Идентификатор персоны (required)
     * @param body                    (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdPreventionsPostCall(String personId, PersonPrevention body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/persons/{person_id}/preventions"
                .replaceAll("\\{" + "person_id" + "\\}", apiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                        throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"ApiKeyAuth"};
        return apiClient
                .buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                        localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsPersonIdPreventionsPostValidateBeforeCall(String personId,
            PersonPrevention body, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException(
                    "Missing the required parameter 'personId' when calling personsPersonIdPreventionsPost(Async)");
        }

        com.squareup.okhttp.Call call = personsPersonIdPreventionsPostCall(personId, body, progressListener,
                progressRequestListener);
        return call;


    }

    /**
     * Добавление информации об учете персоны
     *
     * @param personId Идентификатор персоны (required)
     * @param body     (optional)
     * @return PersonPrevention
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PersonPrevention personsPersonIdPreventionsPost(String personId, PersonPrevention body) throws ApiException {
        ApiResponse<PersonPrevention> resp = personsPersonIdPreventionsPostWithHttpInfo(personId, body);
        return resp.getData();
    }

    /**
     * Добавление информации об учете персоны
     *
     * @param personId Идентификатор персоны (required)
     * @param body     (optional)
     * @return ApiResponse&lt;PersonPrevention&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PersonPrevention> personsPersonIdPreventionsPostWithHttpInfo(String personId,
            PersonPrevention body) throws ApiException {
        com.squareup.okhttp.Call call = personsPersonIdPreventionsPostValidateBeforeCall(personId, body, null, null);
        Type localVarReturnType = new TypeToken<PersonPrevention>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Добавление информации об учете персоны (asynchronously)
     *
     * @param personId Идентификатор персоны (required)
     * @param body     (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdPreventionsPostAsync(String personId, PersonPrevention body,
            final ApiCallback<PersonPrevention> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsPersonIdPreventionsPostValidateBeforeCall(personId, body,
                progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PersonPrevention>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for personsPersonIdUnmergePost
     *
     * @param personId                Идентификатор персоны (required)
     * @param body                    (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdUnmergePostCall(String personId, Body1 body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/persons/{person_id}/unmerge"
                .replaceAll("\\{" + "person_id" + "\\}", apiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                        throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"ApiKeyAuth"};
        return apiClient
                .buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                        localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsPersonIdUnmergePostValidateBeforeCall(String personId, Body1 body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException(
                    "Missing the required parameter 'personId' when calling personsPersonIdUnmergePost(Async)");
        }

        com.squareup.okhttp.Call call = personsPersonIdUnmergePostCall(personId, body, progressListener,
                progressRequestListener);
        return call;


    }

    /**
     * Откат слияния персон
     *
     * @param personId Идентификатор персоны (required)
     * @param body     (optional)
     * @return PersonInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PersonInfo personsPersonIdUnmergePost(String personId, Body1 body) throws ApiException {
        ApiResponse<PersonInfo> resp = personsPersonIdUnmergePostWithHttpInfo(personId, body);
        return resp.getData();
    }

    /**
     * Откат слияния персон
     *
     * @param personId Идентификатор персоны (required)
     * @param body     (optional)
     * @return ApiResponse&lt;PersonInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PersonInfo> personsPersonIdUnmergePostWithHttpInfo(String personId, Body1 body)
            throws ApiException {
        com.squareup.okhttp.Call call = personsPersonIdUnmergePostValidateBeforeCall(personId, body, null, null);
        Type localVarReturnType = new TypeToken<PersonInfo>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Откат слияния персон (asynchronously)
     *
     * @param personId Идентификатор персоны (required)
     * @param body     (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdUnmergePostAsync(String personId, Body1 body,
            final ApiCallback<PersonInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsPersonIdUnmergePostValidateBeforeCall(personId, body, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<PersonInfo>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for personsPost
     *
     * @param body                    (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsPostCall(PersonInfo body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/persons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
                        throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"ApiKeyAuth"};
        return apiClient
                .buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                        localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsPostValidateBeforeCall(PersonInfo body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        com.squareup.okhttp.Call call = personsPostCall(body, progressListener, progressRequestListener);
        return call;


    }

    /**
     * Создание персоны
     *
     * @param body (optional)
     * @return PersonInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PersonInfo personsPost(PersonInfo body) throws ApiException {
        ApiResponse<PersonInfo> resp = personsPostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Создание персоны
     *
     * @param body (optional)
     * @return ApiResponse&lt;PersonInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PersonInfo> personsPostWithHttpInfo(PersonInfo body) throws ApiException {
        com.squareup.okhttp.Call call = personsPostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<PersonInfo>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Создание персоны (asynchronously)
     *
     * @param body     (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsPostAsync(PersonInfo body, final ApiCallback<PersonInfo> callback)
            throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsPostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PersonInfo>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
