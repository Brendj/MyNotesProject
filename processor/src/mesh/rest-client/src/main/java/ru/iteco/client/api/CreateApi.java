/*
 * Copyright (c) 2020. Axetta LLC. All Rights Reserved.
 */

/*
 * API МЭШ.Контингент
 * Описание REST API МЭШ.Контингент
 *
 * OpenAPI spec version: 0.0.1
 * Contact: fixme@ktelabs.ru
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ru.iteco.client.api;

import ru.iteco.client.ApiCallback;
import ru.iteco.client.ApiClient;
import ru.iteco.client.ApiException;
import ru.iteco.client.ApiResponse;
import ru.iteco.client.Configuration;
import ru.iteco.client.Pair;
import ru.iteco.client.ProgressRequestBody;
import ru.iteco.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import ru.iteco.client.model.Category;
import ru.iteco.client.model.ModelClass;
import ru.iteco.client.model.PersonAddress;
import ru.iteco.client.model.PersonAgent;
import ru.iteco.client.model.PersonCategory;
import ru.iteco.client.model.PersonContact;
import ru.iteco.client.model.PersonDocument;
import ru.iteco.client.model.PersonEducation;
import ru.iteco.client.model.PersonPrevention;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CreateApi {
    private ApiClient apiClient;

    public CreateApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CreateApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addCategory
     * @param body Описание категории, который нужно создать (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addCategoryCall(Category body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addCategoryValidateBeforeCall(Category body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addCategory(Async)");
        }
        
        com.squareup.okhttp.Call call = addCategoryCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Создать категорию
     * Метод создания категории
     * @param body Описание категории, который нужно создать (required)
     * @return Category
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Category addCategory(Category body) throws ApiException {
        ApiResponse<Category> resp = addCategoryWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Создать категорию
     * Метод создания категории
     * @param body Описание категории, который нужно создать (required)
     * @return ApiResponse&lt;Category&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Category> addCategoryWithHttpInfo(Category body) throws ApiException {
        com.squareup.okhttp.Call call = addCategoryValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<Category>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Создать категорию (asynchronously)
     * Метод создания категории
     * @param body Описание категории, который нужно создать (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addCategoryAsync(Category body, final ApiCallback<Category> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addCategoryValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Category>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addClass
     * @param body Описание класса, который нужно создать (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addClassCall(ModelClass body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/classes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addClassValidateBeforeCall(ModelClass body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addClass(Async)");
        }
        
        com.squareup.okhttp.Call call = addClassCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Создать класс
     * Метод создания класса
     * @param body Описание класса, который нужно создать (required)
     * @return ModelClass
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelClass addClass(ModelClass body) throws ApiException {
        ApiResponse<ModelClass> resp = addClassWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Создать класс
     * Метод создания класса
     * @param body Описание класса, который нужно создать (required)
     * @return ApiResponse&lt;ModelClass&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelClass> addClassWithHttpInfo(ModelClass body) throws ApiException {
        com.squareup.okhttp.Call call = addClassValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ModelClass>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Создать класс (asynchronously)
     * Метод создания класса
     * @param body Описание класса, который нужно создать (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addClassAsync(ModelClass body, final ApiCallback<ModelClass> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addClassValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelClass>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for personsBatchEducationPost
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsBatchEducationPostCall(List<PersonEducation> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/persons/batch/education";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsBatchEducationPostValidateBeforeCall(List<PersonEducation> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = personsBatchEducationPostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Пакетное создание данных об обучении персоны
     * 
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void personsBatchEducationPost(List<PersonEducation> body) throws ApiException {
        personsBatchEducationPostWithHttpInfo(body);
    }

    /**
     * Пакетное создание данных об обучении персоны
     * 
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> personsBatchEducationPostWithHttpInfo(List<PersonEducation> body) throws ApiException {
        com.squareup.okhttp.Call call = personsBatchEducationPostValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Пакетное создание данных об обучении персоны (asynchronously)
     * 
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsBatchEducationPostAsync(List<PersonEducation> body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsBatchEducationPostValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for personsPersonIdAddressesPost
     * @param personId Идентификатор персоны&lt;/br&gt; (пример \&quot;449ab5bd-4f09-47a0-ba89-70ae2cd49692\&quot;) (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdAddressesPostCall(String personId, PersonAddress body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/persons/{person_id}/addresses"
            .replaceAll("\\{" + "person_id" + "\\}", apiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsPersonIdAddressesPostValidateBeforeCall(String personId, PersonAddress body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling personsPersonIdAddressesPost(Async)");
        }
        
        com.squareup.okhttp.Call call = personsPersonIdAddressesPostCall(personId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Создание нового адреса персоны
     * 
     * @param personId Идентификатор персоны&lt;/br&gt; (пример \&quot;449ab5bd-4f09-47a0-ba89-70ae2cd49692\&quot;) (required)
     * @param body  (optional)
     * @return PersonAddress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PersonAddress personsPersonIdAddressesPost(String personId, PersonAddress body) throws ApiException {
        ApiResponse<PersonAddress> resp = personsPersonIdAddressesPostWithHttpInfo(personId, body);
        return resp.getData();
    }

    /**
     * Создание нового адреса персоны
     * 
     * @param personId Идентификатор персоны&lt;/br&gt; (пример \&quot;449ab5bd-4f09-47a0-ba89-70ae2cd49692\&quot;) (required)
     * @param body  (optional)
     * @return ApiResponse&lt;PersonAddress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PersonAddress> personsPersonIdAddressesPostWithHttpInfo(String personId, PersonAddress body) throws ApiException {
        com.squareup.okhttp.Call call = personsPersonIdAddressesPostValidateBeforeCall(personId, body, null, null);
        Type localVarReturnType = new TypeToken<PersonAddress>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Создание нового адреса персоны (asynchronously)
     * 
     * @param personId Идентификатор персоны&lt;/br&gt; (пример \&quot;449ab5bd-4f09-47a0-ba89-70ae2cd49692\&quot;) (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdAddressesPostAsync(String personId, PersonAddress body, final ApiCallback<PersonAddress> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsPersonIdAddressesPostValidateBeforeCall(personId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PersonAddress>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for personsPersonIdAgentsPost
     * @param personId Идентификатор персоны (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdAgentsPostCall(String personId, PersonAgent body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/persons/{person_id}/agents"
            .replaceAll("\\{" + "person_id" + "\\}", apiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsPersonIdAgentsPostValidateBeforeCall(String personId, PersonAgent body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling personsPersonIdAgentsPost(Async)");
        }
        
        com.squareup.okhttp.Call call = personsPersonIdAgentsPostCall(personId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Создание нового представителя персоны или добавление существующей персоны в качестве представителя. Если добавяется существующая персона, agent_person не указывается, вместо нее должен присутствовать атрибут agent_person_id с идентификатором персоны представителя
     * @param personId Идентификатор персоны (required)
     * @param body  (optional)
     * @return PersonAgent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PersonAgent personsPersonIdAgentsPost(String personId, PersonAgent body) throws ApiException {
        ApiResponse<PersonAgent> resp = personsPersonIdAgentsPostWithHttpInfo(personId, body);
        return resp.getData();
    }

    /**
     * 
     * Создание нового представителя персоны или добавление существующей персоны в качестве представителя. Если добавяется существующая персона, agent_person не указывается, вместо нее должен присутствовать атрибут agent_person_id с идентификатором персоны представителя
     * @param personId Идентификатор персоны (required)
     * @param body  (optional)
     * @return ApiResponse&lt;PersonAgent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PersonAgent> personsPersonIdAgentsPostWithHttpInfo(String personId, PersonAgent body) throws ApiException {
        com.squareup.okhttp.Call call = personsPersonIdAgentsPostValidateBeforeCall(personId, body, null, null);
        Type localVarReturnType = new TypeToken<PersonAgent>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Создание нового представителя персоны или добавление существующей персоны в качестве представителя. Если добавяется существующая персона, agent_person не указывается, вместо нее должен присутствовать атрибут agent_person_id с идентификатором персоны представителя
     * @param personId Идентификатор персоны (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdAgentsPostAsync(String personId, PersonAgent body, final ApiCallback<PersonAgent> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsPersonIdAgentsPostValidateBeforeCall(personId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PersonAgent>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for personsPersonIdCategoryPost
     * @param personId Идентификатор персоны (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdCategoryPostCall(String personId, PersonCategory body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/persons/{person_id}/category"
            .replaceAll("\\{" + "person_id" + "\\}", apiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsPersonIdCategoryPostValidateBeforeCall(String personId, PersonCategory body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling personsPersonIdCategoryPost(Async)");
        }
        
        com.squareup.okhttp.Call call = personsPersonIdCategoryPostCall(personId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Добавление новых данных о категории
     * 
     * @param personId Идентификатор персоны (required)
     * @param body  (optional)
     * @return PersonCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PersonCategory personsPersonIdCategoryPost(String personId, PersonCategory body) throws ApiException {
        ApiResponse<PersonCategory> resp = personsPersonIdCategoryPostWithHttpInfo(personId, body);
        return resp.getData();
    }

    /**
     * Добавление новых данных о категории
     * 
     * @param personId Идентификатор персоны (required)
     * @param body  (optional)
     * @return ApiResponse&lt;PersonCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PersonCategory> personsPersonIdCategoryPostWithHttpInfo(String personId, PersonCategory body) throws ApiException {
        com.squareup.okhttp.Call call = personsPersonIdCategoryPostValidateBeforeCall(personId, body, null, null);
        Type localVarReturnType = new TypeToken<PersonCategory>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Добавление новых данных о категории (asynchronously)
     * 
     * @param personId Идентификатор персоны (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdCategoryPostAsync(String personId, PersonCategory body, final ApiCallback<PersonCategory> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsPersonIdCategoryPostValidateBeforeCall(personId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PersonCategory>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for personsPersonIdContactsPost
     * @param personId Идентификатор персоны (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdContactsPostCall(String personId, PersonContact body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/persons/{person_id}/contacts"
            .replaceAll("\\{" + "person_id" + "\\}", apiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsPersonIdContactsPostValidateBeforeCall(String personId, PersonContact body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling personsPersonIdContactsPost(Async)");
        }
        
        com.squareup.okhttp.Call call = personsPersonIdContactsPostCall(personId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Создание нового контакта персоны
     * 
     * @param personId Идентификатор персоны (required)
     * @param body  (optional)
     * @return PersonContact
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PersonContact personsPersonIdContactsPost(String personId, PersonContact body) throws ApiException {
        ApiResponse<PersonContact> resp = personsPersonIdContactsPostWithHttpInfo(personId, body);
        return resp.getData();
    }

    /**
     * Создание нового контакта персоны
     * 
     * @param personId Идентификатор персоны (required)
     * @param body  (optional)
     * @return ApiResponse&lt;PersonContact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PersonContact> personsPersonIdContactsPostWithHttpInfo(String personId, PersonContact body) throws ApiException {
        com.squareup.okhttp.Call call = personsPersonIdContactsPostValidateBeforeCall(personId, body, null, null);
        Type localVarReturnType = new TypeToken<PersonContact>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Создание нового контакта персоны (asynchronously)
     * 
     * @param personId Идентификатор персоны (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdContactsPostAsync(String personId, PersonContact body, final ApiCallback<PersonContact> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsPersonIdContactsPostValidateBeforeCall(personId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PersonContact>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for personsPersonIdDocumentsPost
     * @param personId Идентификатор персоны (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdDocumentsPostCall(String personId, PersonDocument body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/persons/{person_id}/documents"
            .replaceAll("\\{" + "person_id" + "\\}", apiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsPersonIdDocumentsPostValidateBeforeCall(String personId, PersonDocument body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling personsPersonIdDocumentsPost(Async)");
        }
        
        com.squareup.okhttp.Call call = personsPersonIdDocumentsPostCall(personId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Создание нового документа персоны
     * 1. ищется персона с указанным id.&lt;br/&gt;2. Создается документ с указанными параметрами.&lt;br/&gt; 3. заполняется таблица person_document.&lt;br/&gt; 4. В результате возвращается созданная структура описания документа&lt;br/&gt;
     * @param personId Идентификатор персоны (required)
     * @param body  (optional)
     * @return PersonDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PersonDocument personsPersonIdDocumentsPost(String personId, PersonDocument body) throws ApiException {
        ApiResponse<PersonDocument> resp = personsPersonIdDocumentsPostWithHttpInfo(personId, body);
        return resp.getData();
    }

    /**
     * Создание нового документа персоны
     * 1. ищется персона с указанным id.&lt;br/&gt;2. Создается документ с указанными параметрами.&lt;br/&gt; 3. заполняется таблица person_document.&lt;br/&gt; 4. В результате возвращается созданная структура описания документа&lt;br/&gt;
     * @param personId Идентификатор персоны (required)
     * @param body  (optional)
     * @return ApiResponse&lt;PersonDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PersonDocument> personsPersonIdDocumentsPostWithHttpInfo(String personId, PersonDocument body) throws ApiException {
        com.squareup.okhttp.Call call = personsPersonIdDocumentsPostValidateBeforeCall(personId, body, null, null);
        Type localVarReturnType = new TypeToken<PersonDocument>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Создание нового документа персоны (asynchronously)
     * 1. ищется персона с указанным id.&lt;br/&gt;2. Создается документ с указанными параметрами.&lt;br/&gt; 3. заполняется таблица person_document.&lt;br/&gt; 4. В результате возвращается созданная структура описания документа&lt;br/&gt;
     * @param personId Идентификатор персоны (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdDocumentsPostAsync(String personId, PersonDocument body, final ApiCallback<PersonDocument> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsPersonIdDocumentsPostValidateBeforeCall(personId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PersonDocument>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for personsPersonIdEducationPost
     * @param personId Идентификатор персоны (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdEducationPostCall(String personId, PersonEducation body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/persons/{person_id}/education"
            .replaceAll("\\{" + "person_id" + "\\}", apiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsPersonIdEducationPostValidateBeforeCall(String personId, PersonEducation body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling personsPersonIdEducationPost(Async)");
        }
        
        com.squareup.okhttp.Call call = personsPersonIdEducationPostCall(personId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Добавление новых данных об обучении
     * 
     * @param personId Идентификатор персоны (required)
     * @param body  (optional)
     * @return PersonEducation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PersonEducation personsPersonIdEducationPost(String personId, PersonEducation body) throws ApiException {
        ApiResponse<PersonEducation> resp = personsPersonIdEducationPostWithHttpInfo(personId, body);
        return resp.getData();
    }

    /**
     * Добавление новых данных об обучении
     * 
     * @param personId Идентификатор персоны (required)
     * @param body  (optional)
     * @return ApiResponse&lt;PersonEducation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PersonEducation> personsPersonIdEducationPostWithHttpInfo(String personId, PersonEducation body) throws ApiException {
        com.squareup.okhttp.Call call = personsPersonIdEducationPostValidateBeforeCall(personId, body, null, null);
        Type localVarReturnType = new TypeToken<PersonEducation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Добавление новых данных об обучении (asynchronously)
     * 
     * @param personId Идентификатор персоны (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdEducationPostAsync(String personId, PersonEducation body, final ApiCallback<PersonEducation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsPersonIdEducationPostValidateBeforeCall(personId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PersonEducation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for personsPersonIdPreventionsPost
     * @param personId Идентификатор персоны (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdPreventionsPostCall(String personId, PersonPrevention body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/persons/{person_id}/preventions"
            .replaceAll("\\{" + "person_id" + "\\}", apiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call personsPersonIdPreventionsPostValidateBeforeCall(String personId, PersonPrevention body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling personsPersonIdPreventionsPost(Async)");
        }
        
        com.squareup.okhttp.Call call = personsPersonIdPreventionsPostCall(personId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Добавление информации об учете персоны
     * 
     * @param personId Идентификатор персоны (required)
     * @param body  (optional)
     * @return PersonPrevention
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PersonPrevention personsPersonIdPreventionsPost(String personId, PersonPrevention body) throws ApiException {
        ApiResponse<PersonPrevention> resp = personsPersonIdPreventionsPostWithHttpInfo(personId, body);
        return resp.getData();
    }

    /**
     * Добавление информации об учете персоны
     * 
     * @param personId Идентификатор персоны (required)
     * @param body  (optional)
     * @return ApiResponse&lt;PersonPrevention&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PersonPrevention> personsPersonIdPreventionsPostWithHttpInfo(String personId, PersonPrevention body) throws ApiException {
        com.squareup.okhttp.Call call = personsPersonIdPreventionsPostValidateBeforeCall(personId, body, null, null);
        Type localVarReturnType = new TypeToken<PersonPrevention>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Добавление информации об учете персоны (asynchronously)
     * 
     * @param personId Идентификатор персоны (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call personsPersonIdPreventionsPostAsync(String personId, PersonPrevention body, final ApiCallback<PersonPrevention> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = personsPersonIdPreventionsPostValidateBeforeCall(personId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PersonPrevention>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
