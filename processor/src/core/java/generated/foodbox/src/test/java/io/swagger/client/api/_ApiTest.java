/*
 * API по питанию в образовательных учреждениях Москвы
 * API по питанию в образовательных учреждениях Москвы
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ClientId;
import io.swagger.client.model.CurrentFoodboxOrderInfo;
import io.swagger.client.model.Error;
import io.swagger.client.model.FoodboxOrder;
import io.swagger.client.model.HandedOrders;
import io.swagger.client.model.HistoryFoodboxOrderInfo;
import org.threeten.bp.LocalDate;
import io.swagger.client.model.OrdersSummary;
import io.swagger.client.model.Prohibition;
import io.swagger.client.model.Prohibitions;
import io.swagger.client.model.RegularOrder;
import io.swagger.client.model.RegularOrders;
import io.swagger.client.model.SingleOrder;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for _Api
 */
@Ignore
public class _ApiTest {

    private final _Api api = new _Api();

    /**
     * Создаёт заказ
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addPersonFoodboxOrderTest() throws ApiException {
        FoodboxOrder body = null;
        ClientId clientId = null;
        String xRequestID = null;
        CurrentFoodboxOrderInfo response = api.addPersonFoodboxOrder(body, clientId, xRequestID);

        // TODO: test validations
    }
    /**
     * Добавляет заказы.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addPersonRegularOrdersTest() throws ApiException {
        List<RegularOrder> body = null;
        ClientId clientId = null;
        Boolean replace = null;
        List<Long> response = api.addPersonRegularOrders(body, clientId, replace);

        // TODO: test validations
    }
    /**
     * Создаёт заказ
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addPersonSingleOrderTest() throws ApiException {
        SingleOrder body = null;
        ClientId clientId = null;
        Long response = api.addPersonSingleOrder(body, clientId);

        // TODO: test validations
    }
    /**
     * Удаляет заказ по идентификатору заказа.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePersonFoodboxOrderTest() throws ApiException {
        Long foodboxOrderId = null;
        api.deletePersonFoodboxOrder(foodboxOrderId);

        // TODO: test validations
    }
    /**
     * Удаляет заказы.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePersonRegularOrdersTest() throws ApiException {
        ClientId clientId = null;
        Long orderId = null;
        List<Long> id = null;
        api.deletePersonRegularOrders(clientId, orderId, id);

        // TODO: test validations
    }
    /**
     * Удаляет заказ.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePersonSingleOrdersTest() throws ApiException {
        Long orderId = null;
        api.deletePersonSingleOrders(orderId);

        // TODO: test validations
    }
    /**
     * Возвращает заказ по идентификатору заказа.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPersonFoodboxOrderTest() throws ApiException {
        Long foodboxOrderId = null;
        HistoryFoodboxOrderInfo response = api.getPersonFoodboxOrder(foodboxOrderId);

        // TODO: test validations
    }
    /**
     * Возвращает список всех фудбокс-заказов.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPersonFoodboxOrdersTest() throws ApiException {
        ClientId clientId = null;
        LocalDate from = null;
        LocalDate to = null;
        String xRequestID = null;
        String sort = null;
        HistoryFoodboxOrderInfo response = api.getPersonFoodboxOrders(clientId, from, to, xRequestID, sort);

        // TODO: test validations
    }
    /**
     * Возвращает список выданных заказов.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPersonHandedOrdersTest() throws ApiException {
        ClientId clientId = null;
        LocalDate from = null;
        LocalDate to = null;
        Integer offset = null;
        Integer limit = null;
        String sort = null;
        HandedOrders response = api.getPersonHandedOrders(clientId, from, to, offset, limit, sort);

        // TODO: test validations
    }
    /**
     * Отчёт по предзаказам на 14 дней
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPersonOrdersSummaryTest() throws ApiException {
        ClientId clientId = null;
        OrdersSummary response = api.getPersonOrdersSummary(clientId);

        // TODO: test validations
    }
    /**
     * Возвращает список ограничений.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPersonProhibitionsTest() throws ApiException {
        ClientId clientId = null;
        Prohibitions response = api.getPersonProhibitions(clientId);

        // TODO: test validations
    }
    /**
     * Возвращает список заказов.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPersonRegularOrdersTest() throws ApiException {
        ClientId clientId = null;
        LocalDate onDate = null;
        RegularOrders response = api.getPersonRegularOrders(clientId, onDate);

        // TODO: test validations
    }
    /**
     * Возвращает список заказов.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPersonSingleOrdersTest() throws ApiException {
        ClientId clientId = null;
        LocalDate onDate = null;
        List<SingleOrder> response = api.getPersonSingleOrders(clientId, onDate);

        // TODO: test validations
    }
    /**
     * Установка ограничений на категории, подкатегории, блюда для клиента.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setPersonProhibitionsTest() throws ApiException {
        ClientId clientId = null;
        List<Prohibition> body = null;
        api.setPersonProhibitions(clientId, body);

        // TODO: test validations
    }
    /**
     * Обновляет отдельные параметры заказа.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setPersonSingleOrderAmountTest() throws ApiException {
        Long orderId = null;
        Integer amount = null;
        api.setPersonSingleOrderAmount(orderId, amount);

        // TODO: test validations
    }
    /**
     * Обновляет заказ.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePersonRegularOrderTest() throws ApiException {
        RegularOrder body = null;
        ClientId clientId = null;
        Long orderId = null;
        api.updatePersonRegularOrder(body, clientId, orderId);

        // TODO: test validations
    }
}
