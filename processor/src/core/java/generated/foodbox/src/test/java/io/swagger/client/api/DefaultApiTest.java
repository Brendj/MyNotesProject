/*
 * API по питанию в образовательных учреждениях Москвы
 * API по питанию в образовательных учреждениях Москвы
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ClientData;
import io.swagger.client.model.ClientId;
import io.swagger.client.model.Error;
import io.swagger.client.model.ExpenseConstraints;
import org.threeten.bp.LocalDate;
import io.swagger.client.model.PersonBuffetMenu;
import io.swagger.client.model.PersonComplexMenu;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Возвращает данные клиента
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClientDataTest() throws ApiException {
        ClientId clientId = null;
        List<ClientData> response = api.getClientData(clientId);

        // TODO: test validations
    }
    /**
     * Возвращает меню буфета.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPersonBuffetMenuTest() throws ApiException {
        ClientId clientId = null;
        LocalDate onDate = null;
        PersonBuffetMenu response = api.getPersonBuffetMenu(clientId, onDate);

        // TODO: test validations
    }
    /**
     * Возвращает меню столовой.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPersonComplexMenuTest() throws ApiException {
        ClientId clientId = null;
        LocalDate onDate = null;
        PersonComplexMenu response = api.getPersonComplexMenu(clientId, onDate);

        // TODO: test validations
    }
    /**
     * Устанавливает ограничение на покупку.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setPersonExpenseConstraintsTest() throws ApiException {
        ClientId clientId = null;
        ExpenseConstraints body = null;
        api.setPersonExpenseConstraints(clientId, body);

        // TODO: test validations
    }
    /**
     * Устанавливает разрешение по Фудбоксу для клиента
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setPersonFoodboxAllowedTest() throws ApiException {
        ClientId clientId = null;
        Boolean foodboxAllowed = null;
        api.setPersonFoodboxAllowed(clientId, foodboxAllowed);

        // TODO: test validations
    }
    /**
     * Устанавливает согласие представителя на получение услуги предзаказа
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setPersonPreorderAllowedTest() throws ApiException {
        ClientId clientId = null;
        Boolean body = null;
        api.setPersonPreorderAllowed(clientId, body);

        // TODO: test validations
    }
}
