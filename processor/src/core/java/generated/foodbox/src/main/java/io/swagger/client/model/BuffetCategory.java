/*
 * API по питанию в образовательных учреждениях Москвы
 * API по питанию в образовательных учреждениях Москвы
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.BuffetSubcategory;
import io.swagger.client.model.Dish;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Категория блюд
 */
@Schema(description = "Категория блюд")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-03-13T21:55:36.524+03:00[Europe/Moscow]")public class BuffetCategory {

  @SerializedName("id")
  private Long id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("subcategories")
  private List<BuffetSubcategory> subcategories = null;

  @SerializedName("dishes")
  private List<Dish> dishes = new ArrayList<Dish>();
  public BuffetCategory id(Long id) {
    this.id = id;
    return this;
  }

  

  /**
  * Идентификатор категории
  * @return id
  **/
  @Schema(required = true, description = "Идентификатор категории")
  public Long getId() {
    return id;
  }
  public void setId(Long id) {
    this.id = id;
  }
  public BuffetCategory name(String name) {
    this.name = name;
    return this;
  }

  

  /**
  * Название категории
  * @return name
  **/
  @Schema(required = true, description = "Название категории")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }
  public BuffetCategory subcategories(List<BuffetSubcategory> subcategories) {
    this.subcategories = subcategories;
    return this;
  }

  public BuffetCategory addSubcategoriesItem(BuffetSubcategory subcategoriesItem) {
    if (this.subcategories == null) {
      this.subcategories = new ArrayList<BuffetSubcategory>();
    }
    this.subcategories.add(subcategoriesItem);
    return this;
  }

  /**
  * Список подкатегорий меню
  * @return subcategories
  **/
  @Schema(description = "Список подкатегорий меню")
  public List<BuffetSubcategory> getSubcategories() {
    return subcategories;
  }
  public void setSubcategories(List<BuffetSubcategory> subcategories) {
    this.subcategories = subcategories;
  }
  public BuffetCategory dishes(List<Dish> dishes) {
    this.dishes = dishes;
    return this;
  }

  public BuffetCategory addDishesItem(Dish dishesItem) {
    this.dishes.add(dishesItem);
    return this;
  }

  /**
  * Блюда в категории
  * @return dishes
  **/
  @Schema(required = true, description = "Блюда в категории")
  public List<Dish> getDishes() {
    return dishes;
  }
  public void setDishes(List<Dish> dishes) {
    this.dishes = dishes;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuffetCategory buffetCategory = (BuffetCategory) o;
    return Objects.equals(this.id, buffetCategory.id) &&
        Objects.equals(this.name, buffetCategory.name) &&
        Objects.equals(this.subcategories, buffetCategory.subcategories) &&
        Objects.equals(this.dishes, buffetCategory.dishes);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(id, name, subcategories, dishes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuffetCategory {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    subcategories: ").append(toIndentedString(subcategories)).append("\n");
    sb.append("    dishes: ").append(toIndentedString(dishes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
