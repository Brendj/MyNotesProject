/*
 * API по питанию в образовательных учреждениях Москвы
 * API по питанию в образовательных учреждениях Москвы
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.OrderDish;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.LocalDate;

/**
 * Разовый заказ.
 */
@Schema(description = "Разовый заказ.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-03-13T21:55:36.524+03:00[Europe/Moscow]")public class SingleOrder {

  @SerializedName("id")
  private Long id = 0l;

  @SerializedName("onDate")
  private LocalDate onDate = null;

  @SerializedName("complexId")
  private Long complexId = null;

  @SerializedName("amount")
  private Integer amount = null;

  @SerializedName("deliveryWay")
  private Integer deliveryWay = null;

  @SerializedName("dishes")
  private List<OrderDish> dishes = null;
  public SingleOrder id(Long id) {
    this.id = id;
    return this;
  }

  

  /**
  * Идентификатор предзаказа. Игнорируется при создании
  * @return id
  **/
  @Schema(required = true, description = "Идентификатор предзаказа. Игнорируется при создании")
  public Long getId() {
    return id;
  }
  public void setId(Long id) {
    this.id = id;
  }
  public SingleOrder onDate(LocalDate onDate) {
    this.onDate = onDate;
    return this;
  }

  

  /**
  * Дата, на которую сделан предзаказа.
  * @return onDate
  **/
  @Schema(required = true, description = "Дата, на которую сделан предзаказа.")
  public LocalDate getOnDate() {
    return onDate;
  }
  public void setOnDate(LocalDate onDate) {
    this.onDate = onDate;
  }
  public SingleOrder complexId(Long complexId) {
    this.complexId = complexId;
    return this;
  }

  

  /**
  * Идентификатор комплекса.
  * @return complexId
  **/
  @Schema(required = true, description = "Идентификатор комплекса.")
  public Long getComplexId() {
    return complexId;
  }
  public void setComplexId(Long complexId) {
    this.complexId = complexId;
  }
  public SingleOrder amount(Integer amount) {
    this.amount = amount;
    return this;
  }

  

  /**
  * Заказываемое количество комплексов.
  * @return amount
  **/
  @Schema(required = true, description = "Заказываемое количество комплексов.")
  public Integer getAmount() {
    return amount;
  }
  public void setAmount(Integer amount) {
    this.amount = amount;
  }
  public SingleOrder deliveryWay(Integer deliveryWay) {
    this.deliveryWay = deliveryWay;
    return this;
  }

  

  /**
  * Способ выдачи: 1 - Стандартный; 2 - Фудбокс
  * @return deliveryWay
  **/
  @Schema(required = true, description = "Способ выдачи: 1 - Стандартный; 2 - Фудбокс")
  public Integer getDeliveryWay() {
    return deliveryWay;
  }
  public void setDeliveryWay(Integer deliveryWay) {
    this.deliveryWay = deliveryWay;
  }
  public SingleOrder dishes(List<OrderDish> dishes) {
    this.dishes = dishes;
    return this;
  }

  public SingleOrder addDishesItem(OrderDish dishesItem) {
    if (this.dishes == null) {
      this.dishes = new ArrayList<OrderDish>();
    }
    this.dishes.add(dishesItem);
    return this;
  }

  /**
  * Список блюд в заказе.
  * @return dishes
  **/
  @Schema(description = "Список блюд в заказе.")
  public List<OrderDish> getDishes() {
    return dishes;
  }
  public void setDishes(List<OrderDish> dishes) {
    this.dishes = dishes;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SingleOrder singleOrder = (SingleOrder) o;
    return Objects.equals(this.id, singleOrder.id) &&
        Objects.equals(this.onDate, singleOrder.onDate) &&
        Objects.equals(this.complexId, singleOrder.complexId) &&
        Objects.equals(this.amount, singleOrder.amount) &&
        Objects.equals(this.deliveryWay, singleOrder.deliveryWay) &&
        Objects.equals(this.dishes, singleOrder.dishes);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(id, onDate, complexId, amount, deliveryWay, dishes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SingleOrder {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    onDate: ").append(toIndentedString(onDate)).append("\n");
    sb.append("    complexId: ").append(toIndentedString(complexId)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    deliveryWay: ").append(toIndentedString(deliveryWay)).append("\n");
    sb.append("    dishes: ").append(toIndentedString(dishes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
