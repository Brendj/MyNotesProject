/*
 * API по питанию в образовательных учреждениях Москвы
 * API по питанию в образовательных учреждениях Москвы
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Organization;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.LocalDate;

/**
 * Информация по одному дню периода отчёта
 */
@Schema(description = "Информация по одному дню периода отчёта")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-03-13T21:55:36.524+03:00[Europe/Moscow]")public class OrderDaySummary {

  @SerializedName("onDate")
  private LocalDate onDate = null;

  @SerializedName("orderAllowed")
  private Boolean orderAllowed = null;

  @SerializedName("orderCount")
  private Integer orderCount = null;

  @SerializedName("organization")
  private Organization organization = null;
  public OrderDaySummary onDate(LocalDate onDate) {
    this.onDate = onDate;
    return this;
  }

  

  /**
  * Дата в периоде
  * @return onDate
  **/
  @Schema(description = "Дата в периоде")
  public LocalDate getOnDate() {
    return onDate;
  }
  public void setOnDate(LocalDate onDate) {
    this.onDate = onDate;
  }
  public OrderDaySummary orderAllowed(Boolean orderAllowed) {
    this.orderAllowed = orderAllowed;
    return this;
  }

  

  /**
  * День доступен для заказа питания
  * @return orderAllowed
  **/
  @Schema(description = "День доступен для заказа питания")
  public Boolean isOrderAllowed() {
    return orderAllowed;
  }
  public void setOrderAllowed(Boolean orderAllowed) {
    this.orderAllowed = orderAllowed;
  }
  public OrderDaySummary orderCount(Integer orderCount) {
    this.orderCount = orderCount;
    return this;
  }

  

  /**
  * Количество заказов на день
  * minimum: 0
  * @return orderCount
  **/
  @Schema(description = "Количество заказов на день")
  public Integer getOrderCount() {
    return orderCount;
  }
  public void setOrderCount(Integer orderCount) {
    this.orderCount = orderCount;
  }
  public OrderDaySummary organization(Organization organization) {
    this.organization = organization;
    return this;
  }

  

  /**
  * Get organization
  * @return organization
  **/
  @Schema(description = "")
  public Organization getOrganization() {
    return organization;
  }
  public void setOrganization(Organization organization) {
    this.organization = organization;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderDaySummary orderDaySummary = (OrderDaySummary) o;
    return Objects.equals(this.onDate, orderDaySummary.onDate) &&
        Objects.equals(this.orderAllowed, orderDaySummary.orderAllowed) &&
        Objects.equals(this.orderCount, orderDaySummary.orderCount) &&
        Objects.equals(this.organization, orderDaySummary.organization);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(onDate, orderAllowed, orderCount, organization);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderDaySummary {\n");
    
    sb.append("    onDate: ").append(toIndentedString(onDate)).append("\n");
    sb.append("    orderAllowed: ").append(toIndentedString(orderAllowed)).append("\n");
    sb.append("    orderCount: ").append(toIndentedString(orderCount)).append("\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
