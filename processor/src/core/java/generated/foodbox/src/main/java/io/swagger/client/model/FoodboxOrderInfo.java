/*
 * API по питанию в образовательных учреждениях Москвы
 * API по питанию в образовательных учреждениях Москвы
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.OrderDish;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;

/**
 * Передача данных о заказе (в контексте списка).
 */
@Schema(description = "Передача данных о заказе (в контексте списка).")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-03-13T21:55:36.524+03:00[Europe/Moscow]")public class FoodboxOrderInfo {

  @SerializedName("foodboxOrderId")
  private Long foodboxOrderId = null;

  @SerializedName("status")
  private String status = null;

  @SerializedName("expiredAt")
  private OffsetDateTime expiredAt = null;

  @SerializedName("createdAt")
  private OffsetDateTime createdAt = null;

  @SerializedName("dishes")
  private List<OrderDish> dishes = new ArrayList<OrderDish>();

  @SerializedName("totalPrice")
  private Long totalPrice = null;
  public FoodboxOrderInfo foodboxOrderId(Long foodboxOrderId) {
    this.foodboxOrderId = foodboxOrderId;
    return this;
  }

  

  /**
  * Идентификатор Фудбокс-заказа, передаваемый от ИС ПП
  * @return foodboxOrderId
  **/
  @Schema(required = true, description = "Идентификатор Фудбокс-заказа, передаваемый от ИС ПП")
  public Long getFoodboxOrderId() {
    return foodboxOrderId;
  }
  public void setFoodboxOrderId(Long foodboxOrderId) {
    this.foodboxOrderId = foodboxOrderId;
  }
  public FoodboxOrderInfo status(String status) {
    this.status = status;
    return this;
  }

  

  /**
  * Статус заказа в системе. При запросе списка заказов передавать статусы всех заказов, в т.ч. и текущих
  * @return status
  **/
  @Schema(required = true, description = "Статус заказа в системе. При запросе списка заказов передавать статусы всех заказов, в т.ч. и текущих")
  public String getStatus() {
    return status;
  }
  public void setStatus(String status) {
    this.status = status;
  }
  public FoodboxOrderInfo expiredAt(OffsetDateTime expiredAt) {
    this.expiredAt = expiredAt;
    return this;
  }

  

  /**
  * Дата и время, до которого клиент может забрать заказ
  * @return expiredAt
  **/
  @Schema(required = true, description = "Дата и время, до которого клиент может забрать заказ")
  public OffsetDateTime getExpiredAt() {
    return expiredAt;
  }
  public void setExpiredAt(OffsetDateTime expiredAt) {
    this.expiredAt = expiredAt;
  }
  public FoodboxOrderInfo createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  

  /**
  * Дата и время создания заказа
  * @return createdAt
  **/
  @Schema(required = true, description = "Дата и время создания заказа")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }
  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }
  public FoodboxOrderInfo dishes(List<OrderDish> dishes) {
    this.dishes = dishes;
    return this;
  }

  public FoodboxOrderInfo addDishesItem(OrderDish dishesItem) {
    this.dishes.add(dishesItem);
    return this;
  }

  /**
  * Get dishes
  * @return dishes
  **/
  @Schema(required = true, description = "")
  public List<OrderDish> getDishes() {
    return dishes;
  }
  public void setDishes(List<OrderDish> dishes) {
    this.dishes = dishes;
  }
  public FoodboxOrderInfo totalPrice(Long totalPrice) {
    this.totalPrice = totalPrice;
    return this;
  }

  

  /**
  * Общая стоимость заказа в копейках
  * @return totalPrice
  **/
  @Schema(required = true, description = "Общая стоимость заказа в копейках")
  public Long getTotalPrice() {
    return totalPrice;
  }
  public void setTotalPrice(Long totalPrice) {
    this.totalPrice = totalPrice;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FoodboxOrderInfo foodboxOrderInfo = (FoodboxOrderInfo) o;
    return Objects.equals(this.foodboxOrderId, foodboxOrderInfo.foodboxOrderId) &&
        Objects.equals(this.status, foodboxOrderInfo.status) &&
        Objects.equals(this.expiredAt, foodboxOrderInfo.expiredAt) &&
        Objects.equals(this.createdAt, foodboxOrderInfo.createdAt) &&
        Objects.equals(this.dishes, foodboxOrderInfo.dishes) &&
        Objects.equals(this.totalPrice, foodboxOrderInfo.totalPrice);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(foodboxOrderId, status, expiredAt, createdAt, dishes, totalPrice);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FoodboxOrderInfo {\n");
    
    sb.append("    foodboxOrderId: ").append(toIndentedString(foodboxOrderId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    expiredAt: ").append(toIndentedString(expiredAt)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    dishes: ").append(toIndentedString(dishes)).append("\n");
    sb.append("    totalPrice: ").append(toIndentedString(totalPrice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
