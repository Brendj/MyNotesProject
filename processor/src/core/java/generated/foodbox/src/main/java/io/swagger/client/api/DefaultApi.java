/*
 * API по питанию в образовательных учреждениях Москвы
 * API по питанию в образовательных учреждениях Москвы
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ClientData;
import io.swagger.client.model.ClientId;
import io.swagger.client.model.Error;
import io.swagger.client.model.ExpenseConstraints;
import org.threeten.bp.LocalDate;
import io.swagger.client.model.PersonBuffetMenu;
import io.swagger.client.model.PersonComplexMenu;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getClientData
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getClientDataCall(ClientId clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clients";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("clientId", clientId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "agent", "apiKey", "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getClientDataValidateBeforeCall(ClientId clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getClientData(Async)");
        }
        
        com.squareup.okhttp.Call call = getClientDataCall(clientId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Возвращает данные клиента
     * 
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @return List&lt;ClientData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ClientData> getClientData(ClientId clientId) throws ApiException {
        ApiResponse<List<ClientData>> resp = getClientDataWithHttpInfo(clientId);
        return resp.getData();
    }

    /**
     * Возвращает данные клиента
     * 
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @return ApiResponse&lt;List&lt;ClientData&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ClientData>> getClientDataWithHttpInfo(ClientId clientId) throws ApiException {
        com.squareup.okhttp.Call call = getClientDataValidateBeforeCall(clientId, null, null);
        Type localVarReturnType = new TypeToken<List<ClientData>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Возвращает данные клиента (asynchronously)
     * 
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getClientDataAsync(ClientId clientId, final ApiCallback<List<ClientData>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getClientDataValidateBeforeCall(clientId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ClientData>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPersonBuffetMenu
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param onDate Дата, на которую необходимо вернуть данные (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPersonBuffetMenuCall(ClientId clientId, LocalDate onDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/menu/buffet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("clientId", clientId));
        if (onDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("onDate", onDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "agent", "apiKey", "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPersonBuffetMenuValidateBeforeCall(ClientId clientId, LocalDate onDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getPersonBuffetMenu(Async)");
        }
        
        com.squareup.okhttp.Call call = getPersonBuffetMenuCall(clientId, onDate, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Возвращает меню буфета.
     * 
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param onDate Дата, на которую необходимо вернуть данные (optional)
     * @return PersonBuffetMenu
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PersonBuffetMenu getPersonBuffetMenu(ClientId clientId, LocalDate onDate) throws ApiException {
        ApiResponse<PersonBuffetMenu> resp = getPersonBuffetMenuWithHttpInfo(clientId, onDate);
        return resp.getData();
    }

    /**
     * Возвращает меню буфета.
     * 
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param onDate Дата, на которую необходимо вернуть данные (optional)
     * @return ApiResponse&lt;PersonBuffetMenu&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PersonBuffetMenu> getPersonBuffetMenuWithHttpInfo(ClientId clientId, LocalDate onDate) throws ApiException {
        com.squareup.okhttp.Call call = getPersonBuffetMenuValidateBeforeCall(clientId, onDate, null, null);
        Type localVarReturnType = new TypeToken<PersonBuffetMenu>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Возвращает меню буфета. (asynchronously)
     * 
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param onDate Дата, на которую необходимо вернуть данные (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPersonBuffetMenuAsync(ClientId clientId, LocalDate onDate, final ApiCallback<PersonBuffetMenu> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPersonBuffetMenuValidateBeforeCall(clientId, onDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PersonBuffetMenu>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPersonComplexMenu
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param onDate Дата, на которую необходимо вернуть данные (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPersonComplexMenuCall(ClientId clientId, LocalDate onDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/menu/complexes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("clientId", clientId));
        if (onDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("onDate", onDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "agent", "apiKey", "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPersonComplexMenuValidateBeforeCall(ClientId clientId, LocalDate onDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getPersonComplexMenu(Async)");
        }
        
        com.squareup.okhttp.Call call = getPersonComplexMenuCall(clientId, onDate, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Возвращает меню столовой.
     * 
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param onDate Дата, на которую необходимо вернуть данные (optional)
     * @return PersonComplexMenu
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PersonComplexMenu getPersonComplexMenu(ClientId clientId, LocalDate onDate) throws ApiException {
        ApiResponse<PersonComplexMenu> resp = getPersonComplexMenuWithHttpInfo(clientId, onDate);
        return resp.getData();
    }

    /**
     * Возвращает меню столовой.
     * 
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param onDate Дата, на которую необходимо вернуть данные (optional)
     * @return ApiResponse&lt;PersonComplexMenu&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PersonComplexMenu> getPersonComplexMenuWithHttpInfo(ClientId clientId, LocalDate onDate) throws ApiException {
        com.squareup.okhttp.Call call = getPersonComplexMenuValidateBeforeCall(clientId, onDate, null, null);
        Type localVarReturnType = new TypeToken<PersonComplexMenu>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Возвращает меню столовой. (asynchronously)
     * 
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param onDate Дата, на которую необходимо вернуть данные (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPersonComplexMenuAsync(ClientId clientId, LocalDate onDate, final ApiCallback<PersonComplexMenu> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPersonComplexMenuValidateBeforeCall(clientId, onDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PersonComplexMenu>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setPersonExpenseConstraints
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setPersonExpenseConstraintsCall(ClientId clientId, ExpenseConstraints body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/clients/expenseConstraints";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("clientId", clientId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "agent", "apiKey", "bearerAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setPersonExpenseConstraintsValidateBeforeCall(ClientId clientId, ExpenseConstraints body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling setPersonExpenseConstraints(Async)");
        }
        
        com.squareup.okhttp.Call call = setPersonExpenseConstraintsCall(clientId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Устанавливает ограничение на покупку.
     * 
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void setPersonExpenseConstraints(ClientId clientId, ExpenseConstraints body) throws ApiException {
        setPersonExpenseConstraintsWithHttpInfo(clientId, body);
    }

    /**
     * Устанавливает ограничение на покупку.
     * 
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> setPersonExpenseConstraintsWithHttpInfo(ClientId clientId, ExpenseConstraints body) throws ApiException {
        com.squareup.okhttp.Call call = setPersonExpenseConstraintsValidateBeforeCall(clientId, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Устанавливает ограничение на покупку. (asynchronously)
     * 
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setPersonExpenseConstraintsAsync(ClientId clientId, ExpenseConstraints body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setPersonExpenseConstraintsValidateBeforeCall(clientId, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for setPersonFoodboxAllowed
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param foodboxAllowed Признак разрешения на использование фудбокса (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setPersonFoodboxAllowedCall(ClientId clientId, Boolean foodboxAllowed, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/clients/foodboxAllowed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("clientId", clientId));
        if (foodboxAllowed != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("foodboxAllowed", foodboxAllowed));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "agent", "apiKey", "bearerAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setPersonFoodboxAllowedValidateBeforeCall(ClientId clientId, Boolean foodboxAllowed, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling setPersonFoodboxAllowed(Async)");
        }
        // verify the required parameter 'foodboxAllowed' is set
        if (foodboxAllowed == null) {
            throw new ApiException("Missing the required parameter 'foodboxAllowed' when calling setPersonFoodboxAllowed(Async)");
        }
        
        com.squareup.okhttp.Call call = setPersonFoodboxAllowedCall(clientId, foodboxAllowed, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Устанавливает разрешение по Фудбоксу для клиента
     * 
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param foodboxAllowed Признак разрешения на использование фудбокса (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void setPersonFoodboxAllowed(ClientId clientId, Boolean foodboxAllowed) throws ApiException {
        setPersonFoodboxAllowedWithHttpInfo(clientId, foodboxAllowed);
    }

    /**
     * Устанавливает разрешение по Фудбоксу для клиента
     * 
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param foodboxAllowed Признак разрешения на использование фудбокса (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> setPersonFoodboxAllowedWithHttpInfo(ClientId clientId, Boolean foodboxAllowed) throws ApiException {
        com.squareup.okhttp.Call call = setPersonFoodboxAllowedValidateBeforeCall(clientId, foodboxAllowed, null, null);
        return apiClient.execute(call);
    }

    /**
     * Устанавливает разрешение по Фудбоксу для клиента (asynchronously)
     * 
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param foodboxAllowed Признак разрешения на использование фудбокса (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setPersonFoodboxAllowedAsync(ClientId clientId, Boolean foodboxAllowed, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setPersonFoodboxAllowedValidateBeforeCall(clientId, foodboxAllowed, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for setPersonPreorderAllowed
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setPersonPreorderAllowedCall(ClientId clientId, Boolean body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/clients/preorderAllowed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("clientId", clientId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "agent", "apiKey", "bearerAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setPersonPreorderAllowedValidateBeforeCall(ClientId clientId, Boolean body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling setPersonPreorderAllowed(Async)");
        }
        
        com.squareup.okhttp.Call call = setPersonPreorderAllowedCall(clientId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Устанавливает согласие представителя на получение услуги предзаказа
     * 
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void setPersonPreorderAllowed(ClientId clientId, Boolean body) throws ApiException {
        setPersonPreorderAllowedWithHttpInfo(clientId, body);
    }

    /**
     * Устанавливает согласие представителя на получение услуги предзаказа
     * 
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> setPersonPreorderAllowedWithHttpInfo(ClientId clientId, Boolean body) throws ApiException {
        com.squareup.okhttp.Call call = setPersonPreorderAllowedValidateBeforeCall(clientId, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Устанавливает согласие представителя на получение услуги предзаказа (asynchronously)
     * 
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setPersonPreorderAllowedAsync(ClientId clientId, Boolean body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setPersonPreorderAllowedValidateBeforeCall(clientId, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
