/*
 * API по питанию в образовательных учреждениях Москвы
 * API по питанию в образовательных учреждениях Москвы
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ClientId;
import io.swagger.client.model.CurrentFoodboxOrderInfo;
import io.swagger.client.model.Error;
import io.swagger.client.model.FoodboxOrder;
import io.swagger.client.model.HandedOrders;
import io.swagger.client.model.HistoryFoodboxOrderInfo;
import org.threeten.bp.LocalDate;
import io.swagger.client.model.OrdersSummary;
import io.swagger.client.model.Prohibition;
import io.swagger.client.model.Prohibitions;
import io.swagger.client.model.RegularOrder;
import io.swagger.client.model.RegularOrders;
import io.swagger.client.model.SingleOrder;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class _Api {
    private ApiClient apiClient;

    public _Api() {
        this(Configuration.getDefaultApiClient());
    }

    public _Api(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addPersonFoodboxOrder
     * @param body  (required)
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param xRequestID Идентификатор запроса (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addPersonFoodboxOrderCall(FoodboxOrder body, ClientId clientId, String xRequestID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/orders/foodbox";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("clientId", clientId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestID != null)
        localVarHeaderParams.put("X-Request-ID", apiClient.parameterToString(xRequestID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "agent", "apiKey", "bearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addPersonFoodboxOrderValidateBeforeCall(FoodboxOrder body, ClientId clientId, String xRequestID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addPersonFoodboxOrder(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling addPersonFoodboxOrder(Async)");
        }
        
        com.squareup.okhttp.Call call = addPersonFoodboxOrderCall(body, clientId, xRequestID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Создаёт заказ
     * 
     * @param body  (required)
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param xRequestID Идентификатор запроса (optional)
     * @return CurrentFoodboxOrderInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CurrentFoodboxOrderInfo addPersonFoodboxOrder(FoodboxOrder body, ClientId clientId, String xRequestID) throws ApiException {
        ApiResponse<CurrentFoodboxOrderInfo> resp = addPersonFoodboxOrderWithHttpInfo(body, clientId, xRequestID);
        return resp.getData();
    }

    /**
     * Создаёт заказ
     * 
     * @param body  (required)
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param xRequestID Идентификатор запроса (optional)
     * @return ApiResponse&lt;CurrentFoodboxOrderInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CurrentFoodboxOrderInfo> addPersonFoodboxOrderWithHttpInfo(FoodboxOrder body, ClientId clientId, String xRequestID) throws ApiException {
        com.squareup.okhttp.Call call = addPersonFoodboxOrderValidateBeforeCall(body, clientId, xRequestID, null, null);
        Type localVarReturnType = new TypeToken<CurrentFoodboxOrderInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Создаёт заказ (asynchronously)
     * 
     * @param body  (required)
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param xRequestID Идентификатор запроса (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addPersonFoodboxOrderAsync(FoodboxOrder body, ClientId clientId, String xRequestID, final ApiCallback<CurrentFoodboxOrderInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addPersonFoodboxOrderValidateBeforeCall(body, clientId, xRequestID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CurrentFoodboxOrderInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addPersonRegularOrders
     * @param body  (required)
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param replace true - заменить список (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addPersonRegularOrdersCall(List<RegularOrder> body, ClientId clientId, Boolean replace, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/orders/regular";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("clientId", clientId));
        if (replace != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("replace", replace));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "agent", "apiKey", "bearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addPersonRegularOrdersValidateBeforeCall(List<RegularOrder> body, ClientId clientId, Boolean replace, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addPersonRegularOrders(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling addPersonRegularOrders(Async)");
        }
        
        com.squareup.okhttp.Call call = addPersonRegularOrdersCall(body, clientId, replace, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Добавляет заказы.
     * 
     * @param body  (required)
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param replace true - заменить список (optional)
     * @return List&lt;Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Long> addPersonRegularOrders(List<RegularOrder> body, ClientId clientId, Boolean replace) throws ApiException {
        ApiResponse<List<Long>> resp = addPersonRegularOrdersWithHttpInfo(body, clientId, replace);
        return resp.getData();
    }

    /**
     * Добавляет заказы.
     * 
     * @param body  (required)
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param replace true - заменить список (optional)
     * @return ApiResponse&lt;List&lt;Long&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Long>> addPersonRegularOrdersWithHttpInfo(List<RegularOrder> body, ClientId clientId, Boolean replace) throws ApiException {
        com.squareup.okhttp.Call call = addPersonRegularOrdersValidateBeforeCall(body, clientId, replace, null, null);
        Type localVarReturnType = new TypeToken<List<Long>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Добавляет заказы. (asynchronously)
     * 
     * @param body  (required)
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param replace true - заменить список (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addPersonRegularOrdersAsync(List<RegularOrder> body, ClientId clientId, Boolean replace, final ApiCallback<List<Long>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addPersonRegularOrdersValidateBeforeCall(body, clientId, replace, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Long>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addPersonSingleOrder
     * @param body  (required)
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addPersonSingleOrderCall(SingleOrder body, ClientId clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/orders/single";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("clientId", clientId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "agent", "apiKey", "bearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addPersonSingleOrderValidateBeforeCall(SingleOrder body, ClientId clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addPersonSingleOrder(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling addPersonSingleOrder(Async)");
        }
        
        com.squareup.okhttp.Call call = addPersonSingleOrderCall(body, clientId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Создаёт заказ
     * 
     * @param body  (required)
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @return Long
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Long addPersonSingleOrder(SingleOrder body, ClientId clientId) throws ApiException {
        ApiResponse<Long> resp = addPersonSingleOrderWithHttpInfo(body, clientId);
        return resp.getData();
    }

    /**
     * Создаёт заказ
     * 
     * @param body  (required)
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @return ApiResponse&lt;Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Long> addPersonSingleOrderWithHttpInfo(SingleOrder body, ClientId clientId) throws ApiException {
        com.squareup.okhttp.Call call = addPersonSingleOrderValidateBeforeCall(body, clientId, null, null);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Создаёт заказ (asynchronously)
     * 
     * @param body  (required)
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addPersonSingleOrderAsync(SingleOrder body, ClientId clientId, final ApiCallback<Long> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addPersonSingleOrderValidateBeforeCall(body, clientId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deletePersonFoodboxOrder
     * @param foodboxOrderId Идентификатор Фудбокс-заказа, передаваемый от ИС ПП (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePersonFoodboxOrderCall(Long foodboxOrderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/orders/foodbox/{foodboxOrderId}"
            .replaceAll("\\{" + "foodboxOrderId" + "\\}", apiClient.escapeString(foodboxOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "agent", "apiKey", "bearerAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePersonFoodboxOrderValidateBeforeCall(Long foodboxOrderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'foodboxOrderId' is set
        if (foodboxOrderId == null) {
            throw new ApiException("Missing the required parameter 'foodboxOrderId' when calling deletePersonFoodboxOrder(Async)");
        }
        
        com.squareup.okhttp.Call call = deletePersonFoodboxOrderCall(foodboxOrderId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Удаляет заказ по идентификатору заказа.
     * 
     * @param foodboxOrderId Идентификатор Фудбокс-заказа, передаваемый от ИС ПП (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePersonFoodboxOrder(Long foodboxOrderId) throws ApiException {
        deletePersonFoodboxOrderWithHttpInfo(foodboxOrderId);
    }

    /**
     * Удаляет заказ по идентификатору заказа.
     * 
     * @param foodboxOrderId Идентификатор Фудбокс-заказа, передаваемый от ИС ПП (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePersonFoodboxOrderWithHttpInfo(Long foodboxOrderId) throws ApiException {
        com.squareup.okhttp.Call call = deletePersonFoodboxOrderValidateBeforeCall(foodboxOrderId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Удаляет заказ по идентификатору заказа. (asynchronously)
     * 
     * @param foodboxOrderId Идентификатор Фудбокс-заказа, передаваемый от ИС ПП (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePersonFoodboxOrderAsync(Long foodboxOrderId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePersonFoodboxOrderValidateBeforeCall(foodboxOrderId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deletePersonRegularOrders
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param orderId Идентификатор предзаказа. (required)
     * @param id Список идентификаторов заказов. При отсутствии списка удаляются все заказы. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePersonRegularOrdersCall(ClientId clientId, Long orderId, List<Long> id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/orders/regular/{orderId}"
            .replaceAll("\\{" + "orderId" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("clientId", clientId));
        if (id != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "id", id));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "agent", "apiKey", "bearerAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePersonRegularOrdersValidateBeforeCall(ClientId clientId, Long orderId, List<Long> id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling deletePersonRegularOrders(Async)");
        }
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling deletePersonRegularOrders(Async)");
        }
        
        com.squareup.okhttp.Call call = deletePersonRegularOrdersCall(clientId, orderId, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Удаляет заказы.
     * 
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param orderId Идентификатор предзаказа. (required)
     * @param id Список идентификаторов заказов. При отсутствии списка удаляются все заказы. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePersonRegularOrders(ClientId clientId, Long orderId, List<Long> id) throws ApiException {
        deletePersonRegularOrdersWithHttpInfo(clientId, orderId, id);
    }

    /**
     * Удаляет заказы.
     * 
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param orderId Идентификатор предзаказа. (required)
     * @param id Список идентификаторов заказов. При отсутствии списка удаляются все заказы. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePersonRegularOrdersWithHttpInfo(ClientId clientId, Long orderId, List<Long> id) throws ApiException {
        com.squareup.okhttp.Call call = deletePersonRegularOrdersValidateBeforeCall(clientId, orderId, id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Удаляет заказы. (asynchronously)
     * 
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param orderId Идентификатор предзаказа. (required)
     * @param id Список идентификаторов заказов. При отсутствии списка удаляются все заказы. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePersonRegularOrdersAsync(ClientId clientId, Long orderId, List<Long> id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePersonRegularOrdersValidateBeforeCall(clientId, orderId, id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deletePersonSingleOrders
     * @param orderId Идентификатор предзаказа. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePersonSingleOrdersCall(Long orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/orders/single/{orderId}"
            .replaceAll("\\{" + "orderId" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "agent", "apiKey", "bearerAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePersonSingleOrdersValidateBeforeCall(Long orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling deletePersonSingleOrders(Async)");
        }
        
        com.squareup.okhttp.Call call = deletePersonSingleOrdersCall(orderId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Удаляет заказ.
     * 
     * @param orderId Идентификатор предзаказа. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePersonSingleOrders(Long orderId) throws ApiException {
        deletePersonSingleOrdersWithHttpInfo(orderId);
    }

    /**
     * Удаляет заказ.
     * 
     * @param orderId Идентификатор предзаказа. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePersonSingleOrdersWithHttpInfo(Long orderId) throws ApiException {
        com.squareup.okhttp.Call call = deletePersonSingleOrdersValidateBeforeCall(orderId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Удаляет заказ. (asynchronously)
     * 
     * @param orderId Идентификатор предзаказа. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePersonSingleOrdersAsync(Long orderId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePersonSingleOrdersValidateBeforeCall(orderId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getPersonFoodboxOrder
     * @param foodboxOrderId Идентификатор Фудбокс-заказа, передаваемый от ИС ПП (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPersonFoodboxOrderCall(Long foodboxOrderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/orders/foodbox/{foodboxOrderId}"
            .replaceAll("\\{" + "foodboxOrderId" + "\\}", apiClient.escapeString(foodboxOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "agent", "apiKey", "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPersonFoodboxOrderValidateBeforeCall(Long foodboxOrderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'foodboxOrderId' is set
        if (foodboxOrderId == null) {
            throw new ApiException("Missing the required parameter 'foodboxOrderId' when calling getPersonFoodboxOrder(Async)");
        }
        
        com.squareup.okhttp.Call call = getPersonFoodboxOrderCall(foodboxOrderId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Возвращает заказ по идентификатору заказа.
     * 
     * @param foodboxOrderId Идентификатор Фудбокс-заказа, передаваемый от ИС ПП (required)
     * @return HistoryFoodboxOrderInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HistoryFoodboxOrderInfo getPersonFoodboxOrder(Long foodboxOrderId) throws ApiException {
        ApiResponse<HistoryFoodboxOrderInfo> resp = getPersonFoodboxOrderWithHttpInfo(foodboxOrderId);
        return resp.getData();
    }

    /**
     * Возвращает заказ по идентификатору заказа.
     * 
     * @param foodboxOrderId Идентификатор Фудбокс-заказа, передаваемый от ИС ПП (required)
     * @return ApiResponse&lt;HistoryFoodboxOrderInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HistoryFoodboxOrderInfo> getPersonFoodboxOrderWithHttpInfo(Long foodboxOrderId) throws ApiException {
        com.squareup.okhttp.Call call = getPersonFoodboxOrderValidateBeforeCall(foodboxOrderId, null, null);
        Type localVarReturnType = new TypeToken<HistoryFoodboxOrderInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Возвращает заказ по идентификатору заказа. (asynchronously)
     * 
     * @param foodboxOrderId Идентификатор Фудбокс-заказа, передаваемый от ИС ПП (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPersonFoodboxOrderAsync(Long foodboxOrderId, final ApiCallback<HistoryFoodboxOrderInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPersonFoodboxOrderValidateBeforeCall(foodboxOrderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HistoryFoodboxOrderInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPersonFoodboxOrders
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param from Дата начала выборки. (required)
     * @param to Дата конца выборки. (required)
     * @param xRequestID Идентификатор запроса (optional)
     * @param sort Сортировка по дате факта. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPersonFoodboxOrdersCall(ClientId clientId, LocalDate from, LocalDate to, String xRequestID, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/orders/foodbox";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("clientId", clientId));
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to", to));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestID != null)
        localVarHeaderParams.put("X-Request-ID", apiClient.parameterToString(xRequestID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "agent", "apiKey", "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPersonFoodboxOrdersValidateBeforeCall(ClientId clientId, LocalDate from, LocalDate to, String xRequestID, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getPersonFoodboxOrders(Async)");
        }
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling getPersonFoodboxOrders(Async)");
        }
        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling getPersonFoodboxOrders(Async)");
        }
        
        com.squareup.okhttp.Call call = getPersonFoodboxOrdersCall(clientId, from, to, xRequestID, sort, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Возвращает список всех фудбокс-заказов.
     * 
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param from Дата начала выборки. (required)
     * @param to Дата конца выборки. (required)
     * @param xRequestID Идентификатор запроса (optional)
     * @param sort Сортировка по дате факта. (optional)
     * @return HistoryFoodboxOrderInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HistoryFoodboxOrderInfo getPersonFoodboxOrders(ClientId clientId, LocalDate from, LocalDate to, String xRequestID, String sort) throws ApiException {
        ApiResponse<HistoryFoodboxOrderInfo> resp = getPersonFoodboxOrdersWithHttpInfo(clientId, from, to, xRequestID, sort);
        return resp.getData();
    }

    /**
     * Возвращает список всех фудбокс-заказов.
     * 
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param from Дата начала выборки. (required)
     * @param to Дата конца выборки. (required)
     * @param xRequestID Идентификатор запроса (optional)
     * @param sort Сортировка по дате факта. (optional)
     * @return ApiResponse&lt;HistoryFoodboxOrderInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HistoryFoodboxOrderInfo> getPersonFoodboxOrdersWithHttpInfo(ClientId clientId, LocalDate from, LocalDate to, String xRequestID, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getPersonFoodboxOrdersValidateBeforeCall(clientId, from, to, xRequestID, sort, null, null);
        Type localVarReturnType = new TypeToken<HistoryFoodboxOrderInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Возвращает список всех фудбокс-заказов. (asynchronously)
     * 
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param from Дата начала выборки. (required)
     * @param to Дата конца выборки. (required)
     * @param xRequestID Идентификатор запроса (optional)
     * @param sort Сортировка по дате факта. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPersonFoodboxOrdersAsync(ClientId clientId, LocalDate from, LocalDate to, String xRequestID, String sort, final ApiCallback<HistoryFoodboxOrderInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPersonFoodboxOrdersValidateBeforeCall(clientId, from, to, xRequestID, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HistoryFoodboxOrderInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPersonHandedOrders
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param from Дата начала выборки. (required)
     * @param to Дата конца выборки. (required)
     * @param offset Смещение. (optional)
     * @param limit Максимальное количество элементов в выборке. (optional)
     * @param sort Сортировка по дате факта. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPersonHandedOrdersCall(ClientId clientId, LocalDate from, LocalDate to, Integer offset, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/orders/handed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("clientId", clientId));
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to", to));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "agent", "apiKey", "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPersonHandedOrdersValidateBeforeCall(ClientId clientId, LocalDate from, LocalDate to, Integer offset, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getPersonHandedOrders(Async)");
        }
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling getPersonHandedOrders(Async)");
        }
        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling getPersonHandedOrders(Async)");
        }
        
        com.squareup.okhttp.Call call = getPersonHandedOrdersCall(clientId, from, to, offset, limit, sort, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Возвращает список выданных заказов.
     * 
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param from Дата начала выборки. (required)
     * @param to Дата конца выборки. (required)
     * @param offset Смещение. (optional)
     * @param limit Максимальное количество элементов в выборке. (optional)
     * @param sort Сортировка по дате факта. (optional)
     * @return HandedOrders
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HandedOrders getPersonHandedOrders(ClientId clientId, LocalDate from, LocalDate to, Integer offset, Integer limit, String sort) throws ApiException {
        ApiResponse<HandedOrders> resp = getPersonHandedOrdersWithHttpInfo(clientId, from, to, offset, limit, sort);
        return resp.getData();
    }

    /**
     * Возвращает список выданных заказов.
     * 
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param from Дата начала выборки. (required)
     * @param to Дата конца выборки. (required)
     * @param offset Смещение. (optional)
     * @param limit Максимальное количество элементов в выборке. (optional)
     * @param sort Сортировка по дате факта. (optional)
     * @return ApiResponse&lt;HandedOrders&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HandedOrders> getPersonHandedOrdersWithHttpInfo(ClientId clientId, LocalDate from, LocalDate to, Integer offset, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getPersonHandedOrdersValidateBeforeCall(clientId, from, to, offset, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<HandedOrders>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Возвращает список выданных заказов. (asynchronously)
     * 
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param from Дата начала выборки. (required)
     * @param to Дата конца выборки. (required)
     * @param offset Смещение. (optional)
     * @param limit Максимальное количество элементов в выборке. (optional)
     * @param sort Сортировка по дате факта. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPersonHandedOrdersAsync(ClientId clientId, LocalDate from, LocalDate to, Integer offset, Integer limit, String sort, final ApiCallback<HandedOrders> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPersonHandedOrdersValidateBeforeCall(clientId, from, to, offset, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HandedOrders>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPersonOrdersSummary
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPersonOrdersSummaryCall(ClientId clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/orders/summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("clientId", clientId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "agent", "apiKey", "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPersonOrdersSummaryValidateBeforeCall(ClientId clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getPersonOrdersSummary(Async)");
        }
        
        com.squareup.okhttp.Call call = getPersonOrdersSummaryCall(clientId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Отчёт по предзаказам на 14 дней
     * 
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @return OrdersSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrdersSummary getPersonOrdersSummary(ClientId clientId) throws ApiException {
        ApiResponse<OrdersSummary> resp = getPersonOrdersSummaryWithHttpInfo(clientId);
        return resp.getData();
    }

    /**
     * Отчёт по предзаказам на 14 дней
     * 
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @return ApiResponse&lt;OrdersSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrdersSummary> getPersonOrdersSummaryWithHttpInfo(ClientId clientId) throws ApiException {
        com.squareup.okhttp.Call call = getPersonOrdersSummaryValidateBeforeCall(clientId, null, null);
        Type localVarReturnType = new TypeToken<OrdersSummary>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Отчёт по предзаказам на 14 дней (asynchronously)
     * 
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPersonOrdersSummaryAsync(ClientId clientId, final ApiCallback<OrdersSummary> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPersonOrdersSummaryValidateBeforeCall(clientId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrdersSummary>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPersonProhibitions
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPersonProhibitionsCall(ClientId clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/menu/prohibitions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("clientId", clientId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "agent", "apiKey", "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPersonProhibitionsValidateBeforeCall(ClientId clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getPersonProhibitions(Async)");
        }
        
        com.squareup.okhttp.Call call = getPersonProhibitionsCall(clientId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Возвращает список ограничений.
     * 
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @return Prohibitions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Prohibitions getPersonProhibitions(ClientId clientId) throws ApiException {
        ApiResponse<Prohibitions> resp = getPersonProhibitionsWithHttpInfo(clientId);
        return resp.getData();
    }

    /**
     * Возвращает список ограничений.
     * 
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @return ApiResponse&lt;Prohibitions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Prohibitions> getPersonProhibitionsWithHttpInfo(ClientId clientId) throws ApiException {
        com.squareup.okhttp.Call call = getPersonProhibitionsValidateBeforeCall(clientId, null, null);
        Type localVarReturnType = new TypeToken<Prohibitions>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Возвращает список ограничений. (asynchronously)
     * 
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPersonProhibitionsAsync(ClientId clientId, final ApiCallback<Prohibitions> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPersonProhibitionsValidateBeforeCall(clientId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Prohibitions>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPersonRegularOrders
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param onDate Дата, на которую необходимо вернуть данные (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPersonRegularOrdersCall(ClientId clientId, LocalDate onDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/orders/regular";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("clientId", clientId));
        if (onDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("onDate", onDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "agent", "apiKey", "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPersonRegularOrdersValidateBeforeCall(ClientId clientId, LocalDate onDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getPersonRegularOrders(Async)");
        }
        
        com.squareup.okhttp.Call call = getPersonRegularOrdersCall(clientId, onDate, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Возвращает список заказов.
     * 
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param onDate Дата, на которую необходимо вернуть данные (optional)
     * @return RegularOrders
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RegularOrders getPersonRegularOrders(ClientId clientId, LocalDate onDate) throws ApiException {
        ApiResponse<RegularOrders> resp = getPersonRegularOrdersWithHttpInfo(clientId, onDate);
        return resp.getData();
    }

    /**
     * Возвращает список заказов.
     * 
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param onDate Дата, на которую необходимо вернуть данные (optional)
     * @return ApiResponse&lt;RegularOrders&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RegularOrders> getPersonRegularOrdersWithHttpInfo(ClientId clientId, LocalDate onDate) throws ApiException {
        com.squareup.okhttp.Call call = getPersonRegularOrdersValidateBeforeCall(clientId, onDate, null, null);
        Type localVarReturnType = new TypeToken<RegularOrders>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Возвращает список заказов. (asynchronously)
     * 
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param onDate Дата, на которую необходимо вернуть данные (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPersonRegularOrdersAsync(ClientId clientId, LocalDate onDate, final ApiCallback<RegularOrders> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPersonRegularOrdersValidateBeforeCall(clientId, onDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RegularOrders>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPersonSingleOrders
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param onDate Дата, на которую необходимо вернуть данные (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPersonSingleOrdersCall(ClientId clientId, LocalDate onDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/orders/single";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("clientId", clientId));
        if (onDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("onDate", onDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "agent", "apiKey", "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPersonSingleOrdersValidateBeforeCall(ClientId clientId, LocalDate onDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getPersonSingleOrders(Async)");
        }
        
        com.squareup.okhttp.Call call = getPersonSingleOrdersCall(clientId, onDate, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Возвращает список заказов.
     * 
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param onDate Дата, на которую необходимо вернуть данные (optional)
     * @return List&lt;SingleOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SingleOrder> getPersonSingleOrders(ClientId clientId, LocalDate onDate) throws ApiException {
        ApiResponse<List<SingleOrder>> resp = getPersonSingleOrdersWithHttpInfo(clientId, onDate);
        return resp.getData();
    }

    /**
     * Возвращает список заказов.
     * 
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param onDate Дата, на которую необходимо вернуть данные (optional)
     * @return ApiResponse&lt;List&lt;SingleOrder&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SingleOrder>> getPersonSingleOrdersWithHttpInfo(ClientId clientId, LocalDate onDate) throws ApiException {
        com.squareup.okhttp.Call call = getPersonSingleOrdersValidateBeforeCall(clientId, onDate, null, null);
        Type localVarReturnType = new TypeToken<List<SingleOrder>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Возвращает список заказов. (asynchronously)
     * 
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param onDate Дата, на которую необходимо вернуть данные (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPersonSingleOrdersAsync(ClientId clientId, LocalDate onDate, final ApiCallback<List<SingleOrder>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPersonSingleOrdersValidateBeforeCall(clientId, onDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SingleOrder>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setPersonProhibitions
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setPersonProhibitionsCall(ClientId clientId, List<Prohibition> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/menu/prohibitions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("clientId", clientId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "agent", "apiKey", "bearerAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setPersonProhibitionsValidateBeforeCall(ClientId clientId, List<Prohibition> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling setPersonProhibitions(Async)");
        }
        
        com.squareup.okhttp.Call call = setPersonProhibitionsCall(clientId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Установка ограничений на категории, подкатегории, блюда для клиента.
     * 
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void setPersonProhibitions(ClientId clientId, List<Prohibition> body) throws ApiException {
        setPersonProhibitionsWithHttpInfo(clientId, body);
    }

    /**
     * Установка ограничений на категории, подкатегории, блюда для клиента.
     * 
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> setPersonProhibitionsWithHttpInfo(ClientId clientId, List<Prohibition> body) throws ApiException {
        com.squareup.okhttp.Call call = setPersonProhibitionsValidateBeforeCall(clientId, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Установка ограничений на категории, подкатегории, блюда для клиента. (asynchronously)
     * 
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setPersonProhibitionsAsync(ClientId clientId, List<Prohibition> body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setPersonProhibitionsValidateBeforeCall(clientId, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for setPersonSingleOrderAmount
     * @param orderId Идентификатор предзаказа. (required)
     * @param amount Заказываемое количество комплексов. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setPersonSingleOrderAmountCall(Long orderId, Integer amount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/orders/single/{orderId}"
            .replaceAll("\\{" + "orderId" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (amount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("amount", amount));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "agent", "apiKey", "bearerAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setPersonSingleOrderAmountValidateBeforeCall(Long orderId, Integer amount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling setPersonSingleOrderAmount(Async)");
        }
        
        com.squareup.okhttp.Call call = setPersonSingleOrderAmountCall(orderId, amount, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Обновляет отдельные параметры заказа.
     * 
     * @param orderId Идентификатор предзаказа. (required)
     * @param amount Заказываемое количество комплексов. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void setPersonSingleOrderAmount(Long orderId, Integer amount) throws ApiException {
        setPersonSingleOrderAmountWithHttpInfo(orderId, amount);
    }

    /**
     * Обновляет отдельные параметры заказа.
     * 
     * @param orderId Идентификатор предзаказа. (required)
     * @param amount Заказываемое количество комплексов. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> setPersonSingleOrderAmountWithHttpInfo(Long orderId, Integer amount) throws ApiException {
        com.squareup.okhttp.Call call = setPersonSingleOrderAmountValidateBeforeCall(orderId, amount, null, null);
        return apiClient.execute(call);
    }

    /**
     * Обновляет отдельные параметры заказа. (asynchronously)
     * 
     * @param orderId Идентификатор предзаказа. (required)
     * @param amount Заказываемое количество комплексов. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setPersonSingleOrderAmountAsync(Long orderId, Integer amount, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setPersonSingleOrderAmountValidateBeforeCall(orderId, amount, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updatePersonRegularOrder
     * @param body  (required)
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param orderId Идентификатор предзаказа. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePersonRegularOrderCall(RegularOrder body, ClientId clientId, Long orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/orders/regular/{orderId}"
            .replaceAll("\\{" + "orderId" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("clientId", clientId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "agent", "apiKey", "bearerAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePersonRegularOrderValidateBeforeCall(RegularOrder body, ClientId clientId, Long orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updatePersonRegularOrder(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling updatePersonRegularOrder(Async)");
        }
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling updatePersonRegularOrder(Async)");
        }
        
        com.squareup.okhttp.Call call = updatePersonRegularOrderCall(body, clientId, orderId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Обновляет заказ.
     * 
     * @param body  (required)
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param orderId Идентификатор предзаказа. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updatePersonRegularOrder(RegularOrder body, ClientId clientId, Long orderId) throws ApiException {
        updatePersonRegularOrderWithHttpInfo(body, clientId, orderId);
    }

    /**
     * Обновляет заказ.
     * 
     * @param body  (required)
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param orderId Идентификатор предзаказа. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updatePersonRegularOrderWithHttpInfo(RegularOrder body, ClientId clientId, Long orderId) throws ApiException {
        com.squareup.okhttp.Call call = updatePersonRegularOrderValidateBeforeCall(body, clientId, orderId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Обновляет заказ. (asynchronously)
     * 
     * @param body  (required)
     * @param clientId Идентификатор персоны из МЭШ.Контингент (required)
     * @param orderId Идентификатор предзаказа. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePersonRegularOrderAsync(RegularOrder body, ClientId clientId, Long orderId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePersonRegularOrderValidateBeforeCall(body, clientId, orderId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
