/*
 * API по питанию в образовательных учреждениях Москвы
 * API по питанию в образовательных учреждениях Москвы
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.HandedOrderItem;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Выданный заказ.
 */
@Schema(description = "Выданный заказ.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-03-13T21:55:36.524+03:00[Europe/Moscow]")public class HandedOrder {

  @SerializedName("id")
  private Long id = null;

  @SerializedName("occuredAt")
  private String occuredAt = null;

  @SerializedName("orderType")
  private Integer orderType = null;

  @SerializedName("deliveryWay")
  private Integer deliveryWay = null;

  @SerializedName("sum")
  private Long sum = null;

  @SerializedName("cancel")
  private Boolean cancel = null;

  @SerializedName("items")
  private List<HandedOrderItem> items = null;
  public HandedOrder id(Long id) {
    this.id = id;
    return this;
  }

  

  /**
  * Идентификатор заказа
  * @return id
  **/
  @Schema(example = "704602893596893184", required = true, description = "Идентификатор заказа")
  public Long getId() {
    return id;
  }
  public void setId(Long id) {
    this.id = id;
  }
  public HandedOrder occuredAt(String occuredAt) {
    this.occuredAt = occuredAt;
    return this;
  }

  

  /**
  * Дата и время пробития заказа.
  * @return occuredAt
  **/
  @Schema(required = true, description = "Дата и время пробития заказа.")
  public String getOccuredAt() {
    return occuredAt;
  }
  public void setOccuredAt(String occuredAt) {
    this.occuredAt = occuredAt;
  }
  public HandedOrder orderType(Integer orderType) {
    this.orderType = orderType;
    return this;
  }

  

  /**
  * Тип заказа: 1 - заказ на комплексное питание; 2 - заказ на дополнительные блюда
  * @return orderType
  **/
  @Schema(required = true, description = "Тип заказа: 1 - заказ на комплексное питание; 2 - заказ на дополнительные блюда")
  public Integer getOrderType() {
    return orderType;
  }
  public void setOrderType(Integer orderType) {
    this.orderType = orderType;
  }
  public HandedOrder deliveryWay(Integer deliveryWay) {
    this.deliveryWay = deliveryWay;
    return this;
  }

  

  /**
  * Способ выдачи: 1 - Стандартный; 2 - Фудбокс
  * @return deliveryWay
  **/
  @Schema(description = "Способ выдачи: 1 - Стандартный; 2 - Фудбокс")
  public Integer getDeliveryWay() {
    return deliveryWay;
  }
  public void setDeliveryWay(Integer deliveryWay) {
    this.deliveryWay = deliveryWay;
  }
  public HandedOrder sum(Long sum) {
    this.sum = sum;
    return this;
  }

  

  /**
  * Сумма покупки в копейках
  * @return sum
  **/
  @Schema(example = "11075", required = true, description = "Сумма покупки в копейках")
  public Long getSum() {
    return sum;
  }
  public void setSum(Long sum) {
    this.sum = sum;
  }
  public HandedOrder cancel(Boolean cancel) {
    this.cancel = cancel;
    return this;
  }

  

  /**
  * Признак сторнирования.
  * @return cancel
  **/
  @Schema(required = true, description = "Признак сторнирования.")
  public Boolean isCancel() {
    return cancel;
  }
  public void setCancel(Boolean cancel) {
    this.cancel = cancel;
  }
  public HandedOrder items(List<HandedOrderItem> items) {
    this.items = items;
    return this;
  }

  public HandedOrder addItemsItem(HandedOrderItem itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<HandedOrderItem>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
  * Блюда в заказе.
  * @return items
  **/
  @Schema(description = "Блюда в заказе.")
  public List<HandedOrderItem> getItems() {
    return items;
  }
  public void setItems(List<HandedOrderItem> items) {
    this.items = items;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HandedOrder handedOrder = (HandedOrder) o;
    return Objects.equals(this.id, handedOrder.id) &&
        Objects.equals(this.occuredAt, handedOrder.occuredAt) &&
        Objects.equals(this.orderType, handedOrder.orderType) &&
        Objects.equals(this.deliveryWay, handedOrder.deliveryWay) &&
        Objects.equals(this.sum, handedOrder.sum) &&
        Objects.equals(this.cancel, handedOrder.cancel) &&
        Objects.equals(this.items, handedOrder.items);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(id, occuredAt, orderType, deliveryWay, sum, cancel, items);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HandedOrder {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    occuredAt: ").append(toIndentedString(occuredAt)).append("\n");
    sb.append("    orderType: ").append(toIndentedString(orderType)).append("\n");
    sb.append("    deliveryWay: ").append(toIndentedString(deliveryWay)).append("\n");
    sb.append("    sum: ").append(toIndentedString(sum)).append("\n");
    sb.append("    cancel: ").append(toIndentedString(cancel)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
