/*
 * API по питанию в образовательных учреждениях Москвы
 * API по питанию в образовательных учреждениях Москвы
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.WeekSchedule;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.LocalDate;

/**
 * Регулярный предзаказ.
 */
@Schema(description = "Регулярный предзаказ.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-03-13T21:55:36.524+03:00[Europe/Moscow]")public class RegularOrder {

  @SerializedName("id")
  private Long id = null;

  @SerializedName("contractId")
  private Long contractId = null;

  @SerializedName("from")
  private LocalDate from = null;

  @SerializedName("to")
  private LocalDate to = null;

  @SerializedName("complexId")
  private Long complexId = null;

  @SerializedName("dishId")
  private Long dishId = null;

  @SerializedName("amount")
  private Integer amount = null;

  @SerializedName("days")
  private WeekSchedule days = null;
  public RegularOrder id(Long id) {
    this.id = id;
    return this;
  }

  

  /**
  * Идентификатор предзаказа.
  * @return id
  **/
  @Schema(required = true, description = "Идентификатор предзаказа.")
  public Long getId() {
    return id;
  }
  public void setId(Long id) {
    this.id = id;
  }
  public RegularOrder contractId(Long contractId) {
    this.contractId = contractId;
    return this;
  }

  

  /**
  * Номер лицевого счета клиента
  * @return contractId
  **/
  @Schema(example = "13177", required = true, description = "Номер лицевого счета клиента")
  public Long getContractId() {
    return contractId;
  }
  public void setContractId(Long contractId) {
    this.contractId = contractId;
  }
  public RegularOrder from(LocalDate from) {
    this.from = from;
    return this;
  }

  

  /**
  * Дата начала действия регуляра.
  * @return from
  **/
  @Schema(required = true, description = "Дата начала действия регуляра.")
  public LocalDate getFrom() {
    return from;
  }
  public void setFrom(LocalDate from) {
    this.from = from;
  }
  public RegularOrder to(LocalDate to) {
    this.to = to;
    return this;
  }

  

  /**
  * Дата окончания действия регуляра.
  * @return to
  **/
  @Schema(required = true, description = "Дата окончания действия регуляра.")
  public LocalDate getTo() {
    return to;
  }
  public void setTo(LocalDate to) {
    this.to = to;
  }
  public RegularOrder complexId(Long complexId) {
    this.complexId = complexId;
    return this;
  }

  

  /**
  * Идентификатор комплекса.
  * @return complexId
  **/
  @Schema(description = "Идентификатор комплекса.")
  public Long getComplexId() {
    return complexId;
  }
  public void setComplexId(Long complexId) {
    this.complexId = complexId;
  }
  public RegularOrder dishId(Long dishId) {
    this.dishId = dishId;
    return this;
  }

  

  /**
  * Идентификатор блюда.
  * @return dishId
  **/
  @Schema(description = "Идентификатор блюда.")
  public Long getDishId() {
    return dishId;
  }
  public void setDishId(Long dishId) {
    this.dishId = dishId;
  }
  public RegularOrder amount(Integer amount) {
    this.amount = amount;
    return this;
  }

  

  /**
  * Заказываемое количество комплексов.
  * @return amount
  **/
  @Schema(required = true, description = "Заказываемое количество комплексов.")
  public Integer getAmount() {
    return amount;
  }
  public void setAmount(Integer amount) {
    this.amount = amount;
  }
  public RegularOrder days(WeekSchedule days) {
    this.days = days;
    return this;
  }

  

  /**
  * Get days
  * @return days
  **/
  @Schema(required = true, description = "")
  public WeekSchedule getDays() {
    return days;
  }
  public void setDays(WeekSchedule days) {
    this.days = days;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegularOrder regularOrder = (RegularOrder) o;
    return Objects.equals(this.id, regularOrder.id) &&
        Objects.equals(this.contractId, regularOrder.contractId) &&
        Objects.equals(this.from, regularOrder.from) &&
        Objects.equals(this.to, regularOrder.to) &&
        Objects.equals(this.complexId, regularOrder.complexId) &&
        Objects.equals(this.dishId, regularOrder.dishId) &&
        Objects.equals(this.amount, regularOrder.amount) &&
        Objects.equals(this.days, regularOrder.days);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(id, contractId, from, to, complexId, dishId, amount, days);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegularOrder {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    contractId: ").append(toIndentedString(contractId)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    complexId: ").append(toIndentedString(complexId)).append("\n");
    sb.append("    dishId: ").append(toIndentedString(dishId)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    days: ").append(toIndentedString(days)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
