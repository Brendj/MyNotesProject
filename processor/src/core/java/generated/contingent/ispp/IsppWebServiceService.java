
/*
 * Copyright (c) 2020. Axetta LLC. All Rights Reserved.
 */

package generated.contingent.ispp;

import org.springframework.core.io.DefaultResourceLoader;
import org.springframework.core.io.ResourceLoader;
import org.springframework.stereotype.Component;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import java.io.IOException;
import java.net.URL;
import java.util.logging.Logger;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.4-b01
 * Generated source version: 2.2
 */
@Component
@WebServiceClient(name = "IsppWebServiceService", targetNamespace = "urn:contingent.mos.ru:ws:ispp", wsdlLocation = "META-INF/contingent/ispp.wsdl")
public class IsppWebServiceService
        extends Service {

    private final static String WSDL_LOCATION = "META-INF/contingent/ispp.wsdl";
    private final static URL ISPPWEBSERVICESERVICE_WSDL_LOCATION;
    private final static Logger logger = Logger.getLogger(generated.contingent.ispp.IsppWebServiceService.class.getName());

    static {
        URL url = null;
        try {
            ResourceLoader resourceLoader = new DefaultResourceLoader();
            url = resourceLoader.getResource("classpath:" + WSDL_LOCATION).getURL();
        } catch (IOException e) {
            logger.warning("Failed to create URL for the wsdl Location: '" + WSDL_LOCATION + "', retrying as a local file");
            logger.warning(e.getMessage());
        }
        ISPPWEBSERVICESERVICE_WSDL_LOCATION = url;
    }

    public IsppWebServiceService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public IsppWebServiceService() {
        super(ISPPWEBSERVICESERVICE_WSDL_LOCATION, new QName("urn:contingent.mos.ru:ws:ispp", "IsppWebServiceService"));
    }

    /**
     * @return returns IsppWebService
     */
    @WebEndpoint(name = "IsppWebServicePort")
    public IsppWebService getIsppWebServicePort() {
        return super.getPort(new QName("urn:contingent.mos.ru:ws:ispp", "IsppWebServicePort"), IsppWebService.class);
    }

    /**
     * @param features A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return returns IsppWebService
     */
    @WebEndpoint(name = "IsppWebServicePort")
    public IsppWebService getIsppWebServicePort(WebServiceFeature... features) {
        return super.getPort(new QName("urn:contingent.mos.ru:ws:ispp", "IsppWebServicePort"), IsppWebService.class, features);
    }

}
