
package generated.ru.gov.smev.artefacts.x.services.message_exchange._1;

import generated.ru.gov.smev.artefacts.x.services.message_exchange.types._1.*;
import generated.ru.gov.smev.artefacts.x.services.message_exchange.types.basic._1.Void;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;


/**
 * 
 * 			Точка доступа, позволяющая принимать запросы любых типов,
 * 			а также заявки на предоставление госуслуг.
 * 			Кроме того, через этот сервис производится отмена запросов.
 * 			Поскольку СМЭВ поколения 2 работает в режиме принудительной передачи ответов,
 * 			функциональность "узнать статус запроса и получить ответ, если он готов" отсутствует.
 * 		
 * 
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.4-b01
 * Generated source version: 2.2
 * 
 */
@WebService(name = "SMEVMessageExchangePortType", targetNamespace = "urn://x-artefacts-smev-gov-ru/services/message-exchange/1.2")
@SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
@XmlSeeAlso({
        ObjectFactory.class,
        generated.ru.mos.rnip.xsd.services.forced_acknowledgement._2_4.ObjectFactory.class,
        generated.ru.mos.rnip.xsd.services.export_charges._2_4.ObjectFactory.class,
        generated.ru.mos.rnip.xsd.services.export_payments._2_1.ObjectFactory.class,
        generated.ru.mos.rnip.xsd.services.export_quittances._2_1.ObjectFactory.class,
        generated.ru.gov.smev.artefacts.x.services.message_exchange.types.faults._1.ObjectFactory.class,
        generated.ru.mos.rnip.xsd.payment._2_4.ObjectFactory.class,
        generated.ru.mos.rnip.xsd.common._2_1.ObjectFactory.class,
        generated.ru.mos.rnip.xsd.refund._2_1.ObjectFactory.class,
        generated.ru.mos.rnip.xsd.quittance._2_4.ObjectFactory.class,
        generated.ru.mos.rnip.xsd.charge._2_4.ObjectFactory.class,
        generated.ru.mos.rnip.xsd.catalog._2_1.ObjectFactory.class,
        generated.ru.mos.rnip.xsd.searchconditions._2_1.ObjectFactory.class,
        generated.ru.gov.smev.artefacts.x.services.message_exchange.types.basic._1.ObjectFactory.class,
        generated.ru.mos.rnip.xsd._package._2_1.ObjectFactory.class,
        generated.ru.mos.rnip.xsd.organization._2_1.ObjectFactory.class,
        generated.ru.mos.rnip.xsd.services.export_catalog._2_1.ObjectFactory.class,
        generated.ru.mos.rnip.xsd.services.export_refunds._2_1.ObjectFactory.class,
        generated.ru.mos.rnip.xsd.services.import_catalog._2_1.ObjectFactory.class,
        generated.ru.mos.rnip.xsd.services.import_certificates._2_1.ObjectFactory.class,
        generated.ru.mos.rnip.xsd.services.import_charges._2_1.ObjectFactory.class,
        generated.ru.mos.rnip.xsd.services.import_chargestemplate._2_1.ObjectFactory.class,
        generated.ru.mos.rnip.xsd.services.import_payments._2_1.ObjectFactory.class,
        generated.ru.mos.rnip.xsd.services.import_refunds._2_1.ObjectFactory.class
})
public interface SMEVMessageExchangePortType_24 {


    /**
     * 
     * 				Послать запрос.
     * 				Факт прихода запроса говорит о том, что СМЭВ удостоверился в том, что отправитель
     * 				имеет право на получение данных по этому типу запросов.
     * 				Дополнительный контроль доступа в ИС-поставщике данных запрещён.
     * 				Тип запроса идентифицируется полным именем (qualified name) элемента
     * 				//SendRequestRequest/PrimaryContent/element().
     * 			
     * 
     * @param parameters
     * @return
     *     returns ru.gov.smev.artefacts.x.services.message_exchange.types._1.SendRequestResponse
     * @throws AccessDeniedException
     * @throws SenderIsNotRegisteredException
     * @throws RecipientIsNotFoundException
     * @throws InvalidMessageIdFormatException
     * @throws InvalidContentException
     * @throws TransactionCodeInvalidException
     * @throws AttachmentContentMiscoordinationException
     * @throws MessageIsAlreadySentException
     * @throws StaleMessageIdException
     * @throws SMEVFailureException
     * @throws EndOfLifeException
     * @throws QuoteLimitExceededException
     * @throws SignatureVerificationFaultException
     * @throws BusinessDataTypeIsNotSupportedException
     * @throws AttachmentSizeLimitExceededException
     * @throws DestinationOverflowException
     */
    @WebMethod(operationName = "SendRequest", action = "urn:SendRequest")
    @WebResult(name = "SendRequestResponse", targetNamespace = "urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2", partName = "parameters")
    public SendRequestResponse sendRequest(
            @WebParam(name = "SendRequestRequest", targetNamespace = "urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2", partName = "parameters") SendRequestRequest parameters)
        throws AccessDeniedException, AttachmentContentMiscoordinationException, AttachmentSizeLimitExceededException, BusinessDataTypeIsNotSupportedException, DestinationOverflowException, EndOfLifeException, InvalidContentException, InvalidMessageIdFormatException, MessageIsAlreadySentException, QuoteLimitExceededException, RecipientIsNotFoundException, SMEVFailureException, SenderIsNotRegisteredException, SignatureVerificationFaultException, StaleMessageIdException, TransactionCodeInvalidException
    ;

    /**
     * 
     * 				Дай сообщение из моей входящей очереди, если она не пуста.
     * 			
     * 
     * @param parameters
     * @return
     *     returns ru.gov.smev.artefacts.x.services.message_exchange.types._1.SendResponseResponse
     * @throws SenderIsNotRegisteredException
     * @throws RecipientIsNotFoundException
     * @throws InvalidMessageIdFormatException
     * @throws InvalidContentException
     * @throws AttachmentContentMiscoordinationException
     * @throws MessageIsAlreadySentException
     * @throws SMEVFailureException
     * @throws StaleMessageIdException
     * @throws QuoteLimitExceededException
     * @throws SignatureVerificationFaultException
     * @throws IncorrectResponseContentTypeException
     * @throws BusinessDataTypeIsNotSupportedException
     * @throws AttachmentSizeLimitExceededException
     * @throws DestinationOverflowException
     */
    @WebMethod(operationName = "SendResponse", action = "urn:SendResponse")
    @WebResult(name = "SendResponseResponse", targetNamespace = "urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2", partName = "parameters")
    public SendResponseResponse sendResponse(
            @WebParam(name = "SendResponseRequest", targetNamespace = "urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2", partName = "parameters") SendResponseRequest parameters)
        throws AttachmentContentMiscoordinationException, AttachmentSizeLimitExceededException, BusinessDataTypeIsNotSupportedException, DestinationOverflowException, IncorrectResponseContentTypeException, InvalidContentException, InvalidMessageIdFormatException, MessageIsAlreadySentException, QuoteLimitExceededException, RecipientIsNotFoundException, SMEVFailureException, SenderIsNotRegisteredException, SignatureVerificationFaultException, StaleMessageIdException
    ;

    /**
     * Дай сообщение из моей входящей очереди _запросов_, если она не пуста.
     * 			
     * 
     * @param parameters
     * @return
     *     returns ru.gov.smev.artefacts.x.services.message_exchange.types._1.GetRequestResponse
     * @throws SignatureVerificationFaultException
     * @throws SenderIsNotRegisteredException
     * @throws InvalidContentException
     * @throws UnknownMessageTypeException
     * @throws SMEVFailureException
     */
    @WebMethod(operationName = "GetRequest", action = "urn:GetRequest")
    @WebResult(name = "GetRequestResponse", targetNamespace = "urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2", partName = "parameters")
    public GetRequestResponse getRequest(
            @WebParam(name = "GetRequestRequest", targetNamespace = "urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2", partName = "parameters") GetRequestRequest parameters)
        throws InvalidContentException, SMEVFailureException, SenderIsNotRegisteredException, SignatureVerificationFaultException, UnknownMessageTypeException
    ;

    /**
     * Дай сообщение из моей входящей очереди _запросов_, если она не пуста.
     * 			
     * 
     * @param parameters
     * @return
     *     returns ru.gov.smev.artefacts.x.services.message_exchange.types._1.GetStatusResponse
     * @throws SignatureVerificationFaultException
     * @throws SenderIsNotRegisteredException
     * @throws InvalidContentException
     * @throws UnknownMessageTypeException
     * @throws SMEVFailureException
     */
    @WebMethod(operationName = "GetStatus", action = "urn:GetStatus")
    @WebResult(name = "GetStatusResponse", targetNamespace = "urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2", partName = "parameters")
    public GetStatusResponse getStatus(
            @WebParam(name = "GetStatusRequest", targetNamespace = "urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2", partName = "parameters") GetStatusRequest parameters)
        throws InvalidContentException, SMEVFailureException, SenderIsNotRegisteredException, SignatureVerificationFaultException, UnknownMessageTypeException
    ;

    /**
     * Дай сообщение из моей входящей очереди _ответов_, если она не пуста.
     * 			
     * 
     * @param parameters
     * @return
     *     returns ru.gov.smev.artefacts.x.services.message_exchange.types._1.GetResponseResponse
     * @throws SignatureVerificationFaultException
     * @throws SenderIsNotRegisteredException
     * @throws InvalidContentException
     * @throws UnknownMessageTypeException
     * @throws SMEVFailureException
     */
    @WebMethod(operationName = "GetResponse", action = "urn:GetResponse")
    @WebResult(name = "GetResponseResponse", targetNamespace = "urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2", partName = "parameters")
    public GetResponseResponse getResponse(
            @WebParam(name = "GetResponseRequest", targetNamespace = "urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2", partName = "parameters") GetResponseRequest parameters)
        throws InvalidContentException, SMEVFailureException, SenderIsNotRegisteredException, SignatureVerificationFaultException, UnknownMessageTypeException
    ;

    /**
     * 
     * 				Подтверждение получения сообщения из очереди.
     * 				Должен вызваться после получения сообщения методами GetRequest или GetResponse.
     * 			
     * 
     * @param parameters
     * @return
     *     returns ru.gov.smev.artefacts.x.services.message_exchange.types.basic._1.Void
     * @throws TargetMessageIsNotFoundException
     * @throws SignatureVerificationFaultException
     * @throws SenderIsNotRegisteredException
     * @throws InvalidContentException
     * @throws SMEVFailureException
     */
    @WebMethod(operationName = "Ack", action = "urn:Ack")
    @WebResult(name = "AckResponse", targetNamespace = "urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2", partName = "parameters")
    public Void ack(
            @WebParam(name = "AckRequest", targetNamespace = "urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2", partName = "parameters") AckRequest parameters)
        throws InvalidContentException, SMEVFailureException, SenderIsNotRegisteredException, SignatureVerificationFaultException, TargetMessageIsNotFoundException
    ;

}
